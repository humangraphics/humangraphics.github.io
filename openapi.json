{"openapi": "3.0.1", "info": {"title": "HumanGraphics API", "description": "[HumanGraphics](https://www.humangraphics.io) is a family of products designed to create structured data from unstructured human characteristics and behavior.\n\n# Endpoints\n\nThe API currently provides the following high-level operations:\n\n## Name Parsing and Analysis\n\nThe endpoints with the Names tag take unstructured human names and parse them into a structured representation of the name. In addition, for each parsed name, the endpoints also provide demographic estimates about the named person's country of origin and gender (for all geographies); plus age and race (for some geographies only).\n\n## Location Resolution and Analysis\n\nThe endpoints with the Locations tag take unstructured location names and resolve them into a structured representation of the location. Location resolution provides only city-level granularity at this time, so it is not suitable for the geocoding of addresses.\n\n## Face Analysis\n\nThe endpoints with the Faces tag take image data and recognize and/or analyze human face(s) in the given image. Facial analysis returns structured estimates of the age, gender, and race of the person.\n\n## Combined Analysis\n\nVarious endpoints allow users to provide multiple data points about a person, for example their name and face, to create a more detailed ensemble estimate of the person's demographic profile that is richer and more accurate than analysis from one data point alone.\n\n## Social Media Profile Analysis\n\nThe endpoints with the Social Profile tag take social media profile account identifiers, for example a user ID or a handle, and return a full panel of demographic estimates for the profile, if it exists, by analyzing its name, location, and profile picture.\n\n## Utility\n\nThe endpoints with the Utility tag perform an administrative or assistive function within the API, e.g., testing authentication or uploading images for use in other endpoints. These endpoints typically have no cost and dedicated rate limits to fit their more administrative function.\n\n## Beta\n\nThe endpoints with the Beta tag are in a \"beta\" testing period. These endpoints are of production quality, but their features, functionality, and performance may change in non-backwards compatible ways without notice.\n\n# Usage Tracking\n\nThe HumanGraphics API usage is tracked in \"credits,\" which are purchased on a subscription basis. Each endpoint's cost in credits is captured in its respective documentation. Non-2XX responses count against rate limits, but are billed at zero credits. Note that 2XX responses can still return no data (e.g., name match failure) and are still billed as documented. Bulk endpoints count as one call for rate limiting purposes, but multiple credits depending on request size.\n\nThere are two exceptions\n", "version": "1.6.5"}, "servers": [{"url": "https://api.humangraphics.io"}], "tags": [{"name": "Humans", "description": "Process human name, face, and demographic data"}, {"name": "Names", "description": "Process human names"}, {"name": "Faces", "description": "Process human faces"}, {"name": "Locations", "description": "Process location data"}, {"name": "Social Profiles", "description": "Process social media profiles"}, {"name": "Utility", "description": "Perform basic utility functions"}, {"name": "Beta", "description": "These endpoints are in a \"beta\" testing period. They may experience unexpected outages, and their features, functionality, and performance may change in non-backwards compatible ways without notice."}], "paths": {"/v1/social/profiles/twitter/analyze/bulk": {"post": {"operationId": "analyzeTwitterSocialMediaProfileBulk", "tags": ["Social Profiles", "Beta"], "summary": "Analyze up to 10 Twitter social media profiles (5-55 credits)", "description": "Analyze a list of up to 10 [Twitter](https://www.x.com/) (now \"X\") social media profile, as identified by their IDs or handles. If both the ID and the handle are given, then the ID is used. Analyses of the name, location, and picture fields are combined to produce a single estimate of the profile owner's age, gender, race, and country.\n\nThis bulk endpoint is intended to increase throughput *and* reduce cost. Analyzing Twitter profiles one at a time with the `analyzeTwitterSocialMediaProfile` endpoint results in being charged for one Twitter API call per social profile. In contrast, analyzing Twitter profiles in bulk with this endpoint results in being charged for one Twitter API call per (up to) 10 social profiles, which is more time- and cost-efficient. Thus, analyzing a list of 10 Twitter social profiles with this bulk endpoint (up to 55 credits) versus with the single-input endpoint (up to 100 credits in total) reduces credit usage by up to 45%.\n\nCost: The sum of the below for inputs included.\n\n* Base cost: 5 credits\n\nFor each social profile (up to 10):\n\n* Name: 1 credit\n* Location: 1 credit\n* Face: 3 credits\n\nUsers are only billed for those fields which are populated in the profile. So, a call for two profiles, with: the first having name populated but the default profile picture and no location; and the second having all three of name, location, and profile picture populated; would cost 5+1+5 = 11 credits in total.", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AnalyzeTwitterSocialProfileBulkRequest"}}}, "required": true}, "responses": {"200": {"description": "200 response", "headers": {"X-Subscription-ID": {"schema": {"type": "string"}}, "Access-Control-Allow-Origin": {"schema": {"type": "string"}}, "X-API-Credits": {"schema": {"type": "string"}}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AnalyzeSocialProfileBulkResponse"}}}}, "422": {"description": "422 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "401": {"description": "401 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "403": {"description": "403 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}}, "security": [{"backend": []}, {"api_key": []}]}}, "/v1/humans/analyze": {"post": {"tags": ["Humans", "Faces", "Names", "Locations"], "summary": "Analyze a person's name, location, and face together (1-5 credits)", "description": "Analyze a person, as described by their name, location, and/or a picture containing only their face. Any combination of the above inputs may be given, except none. Estimates for their age, gender, race, and country are combined to produce one estimate based on all these data.\n\nCost: The sum of the below for inputs included.\n\n* Name: 1 credit\n* Location: 1 credit\n* Face: 3 credits\n\nSo, a call that includes all 3 inputs costs 5 credits.", "operationId": "analyzeHuman", "requestBody": {"description": "A request to the `analyzeHuman` endpoint. At least one of `locationNameText`, `locationName`, `humanNameText`, `humanName`, `humanFaceImage`, and `humanFace` must be given.\n\nThe `locationNameText` property is **deprecated**. Use the `locationName` property instead. If both `locationNameText` and `locationName` are given, then `locationNameText` is ignored.\n\nThe `humanNameText` property is **deprecated**. Use the `humanName` property instead. If both `humanNameText` and `humanName` are given, then `humanNameText` is ignored.\n\nThe `humanFaceImage` and `humanFaceRegion` properties are **deprecated**. Use the `humanFace` property instead. If both `humanFace` and `humanFaceImage` are given, then `humanFaceImage` and `humanFaceRegion` are both ignored.\n", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AnalyzeHumanRequest"}}}, "required": true}, "responses": {"200": {"description": "200 response", "headers": {"X-Subscription-ID": {"schema": {"type": "string"}}, "Access-Control-Allow-Origin": {"schema": {"type": "string"}}, "X-API-Credits": {"schema": {"type": "string"}}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AnalyzeHumanResponse"}}}}, "422": {"description": "422 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "401": {"description": "401 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "403": {"description": "403 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}}, "security": [{"backend": []}, {"api_key": []}]}}, "/v1/social/profiles/twitter/analyze": {"post": {"tags": ["Social Profiles", "Beta"], "summary": "Analyze a Twitter social media profile (5-10 credits)", "description": "Analyze a [Twitter](https://www.x.com/) (now \"X\") social media profile, as identified by its ID or handle. If both the ID and the handle are given, then the ID is used. Analyses of the name, location, and picture fields are combined to produce a single estimate of the profile owner's age, gender, race, and country.\n\nCost: The sum of the below for inputs included.\n\n* Base cost: 5 credits\n* Name: 1 credit\n* Location: 1 credit\n* Face: 3 credits\n\nUsers are only billed for those fields which are populated in the profile. So, a call for a profile with the name populated but the default profile picture and no location would cost 5+1 = 6 credits.", "operationId": "analyzeTwitterSocialMediaProfile", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AnalyzeTwitterSocialProfileRequest"}}}, "required": true}, "responses": {"200": {"description": "200 response", "headers": {"X-Subscription-ID": {"schema": {"type": "string"}}, "Access-Control-Allow-Origin": {"schema": {"type": "string"}}, "X-API-Credits": {"schema": {"type": "string"}}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AnalyzeSocialProfileResponse"}}}}, "422": {"description": "422 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "401": {"description": "401 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "403": {"description": "403 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}}, "security": [{"backend": []}, {"api_key": []}]}}, "/v1/humans/names/analyze": {"post": {"tags": ["Humans", "Names"], "summary": "Analyze a human name from parts (1 credit)", "description": "Analyze a human name provided in parts, i.e., given name and family name.\n\nCost: 1 credit, regardless of whether or not the analysis succeeds.", "operationId": "analyzeHumanName", "requestBody": {"description": "A request to the `analyzeHumanName` endpoint", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HumanNameAnalyzeRequest"}}}, "required": true}, "responses": {"200": {"description": "200 response", "headers": {"X-Subscription-ID": {"schema": {"type": "string"}}, "Access-Control-Allow-Origin": {"schema": {"type": "string"}}, "X-API-Credits": {"schema": {"type": "string"}}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HumanNameAnalyzeResponse"}}}}, "422": {"description": "422 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "401": {"description": "401 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "403": {"description": "403 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}}, "security": [{"backend": []}, {"api_key": []}]}}, "/v1/ping": {"get": {"tags": ["Utility"], "operationId": "ping", "summary": "Test authentication (0 credits)", "description": "A \"no op\" endpoint that allows users to test their credentials.\n\nThis endpoint has its own dedicated rate limit with 10 requests per second on all plans. Calls to this endpoint do not count against the rate limit(s) of other endpoints. Calls to other endpoints do not count against this endpoint's rate limits.\n\nCost: 0 credits.", "responses": {"401": {"description": "401 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "204": {"description": "204 response", "headers": {"X-Subscription-ID": {"schema": {"type": "string"}}, "X-API-Credits": {"schema": {"type": "string"}}}, "content": {}}}, "security": [{"backend": []}, {"api_key": []}]}}, "/v1/locations/names/analyze": {"post": {"tags": ["Locations"], "summary": "Analyze a location name from parts (1 credit)", "description": "Analyze a location name provided in parts, i.e., country, state, and city.\n\nCost: 1 credit, regardless of whether or not the match succeeds.\n", "operationId": "analyzeLocationName", "requestBody": {"description": "The location name to analyze", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/LocationNameAnalyzeRequest"}}}, "required": true}, "responses": {"200": {"description": "The resolve procedure completed successfully. It still may not contain a match.", "headers": {"X-Subscription-ID": {"schema": {"type": "string"}}, "Access-Control-Allow-Origin": {"schema": {"type": "string"}}, "X-API-Credits": {"schema": {"type": "string"}}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/LocationNameAnalyzeResponse"}}}}, "422": {"description": "422 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "401": {"description": "401 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "403": {"description": "403 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}}, "security": [{"backend": []}, {"api_key": []}]}}, "/v1/images/stage": {"post": {"tags": ["Utility"], "summary": "Upload image for use in other endpoints", "description": "Upload an image for later use in other endpoints, e.g., `detectFaces` or `analyzeHumanFace`. On success, the result can be used as inputs to operations that take an `Image` as input.\n\nImages may be either JPEG or PNG format, up to 5MB in size, with dimension up to 4096x4096.\n\nFor security reasons, staged images expire five minutes after upload. Attempts to refer to a staged image after it has expired will result in a \"gone\" error from the endpoint in question. The intended workflow is to stage images, use them immediately, and then discard them, letting them expire. Staged images should never be persisted on a long-term basis because they expire.\n\nStaged images are write-only. There is no way to retrieve a staged image from the API; they are purely an input mechanism for providing large images as inputs to other endpoints.\n\n\n\nCost: 0 credits.", "operationId": "stageImage", "requestBody": {"content": {"image/jpeg": {"schema": {"$ref": "#/components/schemas/BinaryData"}}, "image/png": {"schema": {"$ref": "#/components/schemas/BinaryData"}}}, "required": true}, "responses": {"200": {"description": "200 response", "headers": {"X-Subscription-ID": {"schema": {"type": "string"}}, "Access-Control-Allow-Origin": {"schema": {"type": "string"}}, "X-API-Credits": {"schema": {"type": "string"}}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image"}}}}, "422": {"description": "422 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "401": {"description": "401 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "413": {"description": "413 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "403": {"description": "403 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}}, "security": [{"backend": []}, {"api_key": []}]}}, "/v1/locations/names/analyze/bulk": {"post": {"tags": ["Locations"], "summary": "Analyze location names, in bulk (1-10 credits)", "description": "Analyze a list of up to 10 location names in one operation.\n\nBulk operations are intended to increase throughput, not reduce cost.\n\nCost: 1 credit per name, whether each match is successful or not.\n", "operationId": "analyzeLocationNameBulk", "requestBody": {"description": "The list of location names to analyze", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/LocationNameAnalyzeBulkRequest"}}}, "required": true}, "responses": {"200": {"description": "The resolve procedure completed successfully. It still may not contain a match.", "headers": {"X-Subscription-ID": {"schema": {"type": "string"}}, "Access-Control-Allow-Origin": {"schema": {"type": "string"}}, "X-API-Credits": {"schema": {"type": "string"}}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/LocationNameAnalyzeBulkResponse"}}}}, "422": {"description": "422 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "401": {"description": "401 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "403": {"description": "403 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}}, "security": [{"backend": []}, {"api_key": []}]}}, "/v1/humans/names/parse": {"post": {"tags": ["Humans", "Names"], "summary": "Parse a human name (1 credit)", "description": "Parses a human name string (e.g., \"George Washington\") into its most likely parts (e.g., forename \"George\", surname \"Washington\"), with demographic estimates (i.e., age, sex, race, and country of origin). A name has at most six components:\n\n1. **Given Name** - In most cultures, a person's given name is a name given to them at birth by parents. Given names are also called first names, forenames, and Christian names. In \"John Ronald Reuel Tolkien,\" \"John\" is the given name.\n2. **Middle Name** - In many cultures, people also receive one or more \"middle names.\" These names are typically either just a second given name, a woman's [maiden name](https://en.wikipedia.org/wiki/Maiden_and_married_names), a name of family significance (e.g., the mother's maiden name), or a [patronymic](https://en.wikipedia.org/wiki/Patronymic)/[matronymic](https://en.wikipedia.org/wiki/Matronymic) name. In \"John Ronald Reuel Tolkien,\" \"Ronald\" is the middle name.\n3. **Second Middle Name** - In some cultures, children are given two middle names, either at birth or at a young age, as in Catholic confirmation (e.g., [George R. R. Martin](https://en.wikipedia.org/wiki/George_R._R._Martin#Early_life)). In \"John Ronald Reuel Tolkien,\" \"Reuel\" is the second middle name.\n4. **Nickname** - It's not uncommon for people to accumulate various and sundry sobriquets throughout their lives, or simply to prefer to go by a name different from their given name. In \"Pete 'Maverick' Mitchell,\" \"Maverick\" is the nickname.\n5. **Family Name** - In most cultures, a person's family name is inherited from one or both of their parents. Family names are also called last names and surnames. In \"John Ronald Reuel Tolkien,\" \"Tolkien\" is the family name.\n6. **Second Family Name** - In some cultures (particularly [hispanic](https://en.wikipedia.org/wiki/Spanish_naming_customs) cultures), children receive two surnames at birth. In \"Jos\u00e9 Fern\u00e1ndez Mart\u00ednez,\" \"Fern\u00e1ndez\" is the family name, and \"Mart\u00ednez\" is the second family name.\n\nMore components may be added to the name model over time, e.g., titles.\n\nNote that while individual parts of a name held separately are not PII (e.g., \"John\" and \"Tolkien,\" separately), a full name (e.g., \"John Ronald Reuel Tolkien\") is PII.\n\nCost: 1 credit, whether the parse is successful or not.\n", "operationId": "parseHumanName", "requestBody": {"description": "A request to the `parseHumanName` endpoint.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HumanNameParseRequest"}}}, "required": true}, "responses": {"200": {"description": "200 response", "headers": {"X-Subscription-ID": {"schema": {"type": "string"}}, "Access-Control-Allow-Origin": {"schema": {"type": "string"}}, "X-API-Credits": {"schema": {"type": "string"}}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HumanNameParseResponse"}}}}, "422": {"description": "422 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "401": {"description": "401 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "403": {"description": "403 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}}, "security": [{"backend": []}, {"api_key": []}]}}, "/v1/humans/faces/analyze": {"post": {"tags": ["Humans", "Faces"], "summary": "Analyze one face for age, gender, and race (3 credits)", "description": "Analyze one human face in the given image.\n\nIf a region is given, then it must match a region returned previously by the `detectHumanFaces` endpoint exactly, and the face in that region is analyzed. Otherwise, the image is assumed to contain exactly one face, and that face is analyzed. If the photograph does not actually have exactly one face, then analysis fails with an appropriate error code.\n\nCost: 3 credits, regardless of whether the face analysis succeeds or not.", "operationId": "analyzeHumanFace", "requestBody": {"description": "A request to the `analyzeHumanFace` endpoint", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HumanFaceAnalyzeRequest"}}}, "required": true}, "responses": {"200": {"description": "200 response", "headers": {"X-Subscription-ID": {"schema": {"type": "string"}}, "Access-Control-Allow-Origin": {"schema": {"type": "string"}}, "X-API-Credits": {"schema": {"type": "string"}}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HumanFaceAnalyzeResponse"}}}}, "422": {"description": "422 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "401": {"description": "401 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "403": {"description": "403 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}}, "security": [{"backend": []}, {"api_key": []}]}}, "/v1/humans/names/parse/bulk": {"post": {"tags": ["Humans", "Names"], "summary": "Parse human names, in bulk (1-10 credits)", "description": "Parse a list of up to 10 human names in one operation.\n\nBulk operations are intended to increase throughput, not reduce cost.\n\nCost: 1 credit per name, whether each parse is successful or not.\n", "operationId": "parseHumanNameBulk", "requestBody": {"description": "A request to the `parseHumanNameBulk` endpoint.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HumanNameParseBulkRequest"}}}, "required": true}, "responses": {"200": {"description": "200 response", "headers": {"X-Subscription-ID": {"schema": {"type": "string"}}, "Access-Control-Allow-Origin": {"schema": {"type": "string"}}, "X-API-Credits": {"schema": {"type": "string"}}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HumanNameParseBulkResponse"}}}}, "422": {"description": "422 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "401": {"description": "401 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "403": {"description": "403 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}}, "security": [{"backend": []}, {"api_key": []}]}}, "/v1/humans/names/analyze/bulk": {"post": {"tags": ["Humans", "Names"], "summary": "Analyze a human name from parts, in bulk (1-10 credits)", "description": "Analyze a list of up to 10 human names in one operation.\n\nBulk operations are intended to increase throughput, not reduce cost.\n\nCost: 1 credit per input, whether each analysis is successful or not.", "operationId": "analyzeHumanNameBulk", "requestBody": {"description": "A request to the `analyzeHumanNameBulk` endpoint.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HumanNameAnalyzeBulkRequest"}}}, "required": true}, "responses": {"200": {"description": "200 response", "headers": {"X-Subscription-ID": {"schema": {"type": "string"}}, "Access-Control-Allow-Origin": {"schema": {"type": "string"}}, "X-API-Credits": {"schema": {"type": "string"}}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HumanNameAnalyzeBulkResponse"}}}}, "422": {"description": "422 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "401": {"description": "401 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "403": {"description": "403 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}}, "security": [{"backend": []}, {"api_key": []}]}}, "/v1/humans/names/multiparse/bulk": {"post": {"tags": ["Humans", "Names"], "summary": "Parse one or more human names from a string, in bulk (1-10 credits)", "description": "Multiparse a list of up to 10 human names in one operation.\n\nBulk operations are intended to increase throughput, not reduce cost.\n\nCost: 1 credit per string, regardless of whether or not the match succeeds and the number of names returned.\n", "operationId": "multiparseHumanNamesBulk", "requestBody": {"description": "A request to the `multiparseHumanNamesBulk` endpoint.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HumanNameMultiparseBulkRequest"}}}, "required": true}, "responses": {"200": {"description": "200 response", "headers": {"X-Subscription-ID": {"schema": {"type": "string"}}, "Access-Control-Allow-Origin": {"schema": {"type": "string"}}, "X-API-Credits": {"schema": {"type": "string"}}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HumanNameMultiparseBulkResponse"}}}}, "422": {"description": "422 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "401": {"description": "401 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "403": {"description": "403 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}}, "security": [{"backend": []}, {"api_key": []}]}}, "/v1/locations/names/resolve": {"post": {"tags": ["Locations"], "summary": "Resolve a location name (1 credit)", "description": "Resolve a location name string (e.g., \"Alexandria, VA\") into its most likely real-world location (e.g., Alexandria, US-VA, US). A location has at most three components:\n\n1. **City** - The lowest-level administrative entity that either is or contains the location and has an [ISO 3166-1 code](https://en.wikipedia.org/wiki/ISO_3166-1), e.g., [US](https://en.wikipedia.org/wiki/United_States), [FR](https://en.wikipedia.org/wiki/France), etc.\n2. **State** - The highest-level administrative entity that either is or contains the location and has an [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) code, e.g., [US-VA](https://en.wikipedia.org/wiki/Virginia), [FR-OCC](https://en.wikipedia.org/wiki/Occitania_%28administrative_region%29), etc.\n3. **City** - A human settlement that has no ISO 3166-1 or 3166-2 codes, e.g., [Alexandria, VA](https://en.wikipedia.org/wiki/Alexandria,_Virginia), [Tolouse, FR](https://en.wikipedia.org/wiki/Toulouse).\n\nAll location matches have a country. In general, if a location match has a city, then it also has a state, although some exceptions exist.\n\nNote that a resolved location is very different from a geocoded address. In particular, locations are not considered PII, whereas addresses are.\n\n Cost: 1 credit, whether the match is successful or not.", "operationId": "resolveLocationName", "requestBody": {"description": "A request to the `resolveLocationName` endpoint.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/LocationNameResolveRequest"}}}, "required": true}, "responses": {"200": {"description": "200 response", "headers": {"X-Subscription-ID": {"schema": {"type": "string"}}, "Access-Control-Allow-Origin": {"schema": {"type": "string"}}, "X-API-Credits": {"schema": {"type": "string"}}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/LocationNameResolveResponse"}}}}, "422": {"description": "422 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "401": {"description": "401 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "403": {"description": "403 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}}, "security": [{"backend": []}, {"api_key": []}]}}, "/v1/humans/names/multiparse": {"post": {"tags": ["Humans", "Names"], "summary": "Parse one or more human names from a string (1 credit)", "description": "Parse one or more human names from the given string.\n\nThis is intended for byline-style text (i.e., lists of names, \"Fox Mulder, Dana Scully\") as opposed to plain text (i.e., named entity recognition).\n\nCost: 1 credit, regardless of whether or not the parse succeeds and the number of names returned.\n", "operationId": "multiparseHumanNames", "requestBody": {"description": "A request to the `multiparseHumanNames` endpoint.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HumanNameMultiparseRequest"}}}, "required": true}, "responses": {"200": {"description": "200 response", "headers": {"X-Subscription-ID": {"schema": {"type": "string"}}, "Access-Control-Allow-Origin": {"schema": {"type": "string"}}, "X-API-Credits": {"schema": {"type": "string"}}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HumanNameMultiparseResponse"}}}}, "422": {"description": "422 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "401": {"description": "401 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "403": {"description": "403 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}}, "security": [{"backend": []}, {"api_key": []}]}}, "/v1/humans/faces/detect": {"post": {"tags": ["Humans", "Faces"], "summary": "Detect faces in an image (1 credit)", "description": "Detect up to 100 faces in an image.\n\nIn general, faces down to 40 pixels on a side are detected successfully. Smaller faces and faces oriented at an extreme angle to the camera or to the vertical may not be detected.\n\nCost: 1 credit, regardless of the number of faces detected.", "operationId": "detectHumanFaces", "requestBody": {"description": "A request to the `detectHumanFaces` endpoint", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HumanFaceDetectRequest"}}}, "required": true}, "responses": {"200": {"description": "200 response", "headers": {"X-Subscription-ID": {"schema": {"type": "string"}}, "Access-Control-Allow-Origin": {"schema": {"type": "string"}}, "X-API-Credits": {"schema": {"type": "string"}}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HumanFaceDetectResponse"}}}}, "422": {"description": "422 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "401": {"description": "401 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "403": {"description": "403 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}}, "security": [{"backend": []}, {"api_key": []}]}}, "/v1/locations/names/resolve/bulk": {"post": {"tags": ["Locations"], "summary": "Resolve location names, in bulk (1-10 credits)", "description": "Resolve a list of up to 10 location names in one operation.\n\nBulk operations are intended to increase throughput, not reduce cost.\n\nCost: 1 credit per location name, whether each match is successful or not.", "operationId": "resolveLocationNameBulk", "requestBody": {"description": "A request to the `resolveLocationNameBulk` endpoint.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/LocationNameResolveBulkRequest"}}}, "required": true}, "responses": {"200": {"description": "200 response", "headers": {"X-Subscription-ID": {"schema": {"type": "string"}}, "Access-Control-Allow-Origin": {"schema": {"type": "string"}}, "X-API-Credits": {"schema": {"type": "string"}}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/LocationNameResolveBulkResponse"}}}}, "422": {"description": "422 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "401": {"description": "401 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}, "403": {"description": "403 response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorMessage"}}}}}, "security": [{"backend": []}, {"api_key": []}]}}}, "components": {"schemas": {"LocationNameAnalyzeBulkResponseItem": {"required": ["id", "response"], "type": "object", "properties": {"id": {"maxLength": 80, "minLength": 1, "type": "string", "description": "The id of the corresponding operation in the bulk request."}, "response": {"$ref": "#/components/schemas/LocationNameAnalyzeResponse"}}, "description": "One response in a `LocationNameAnalyzeBulkResponse`"}, "HumanNameAnalyzeBulkResponse": {"required": ["items"], "type": "object", "properties": {"items": {"type": "array", "items": {"$ref": "#/components/schemas/HumanNameAnalyzeBulkResponseItem"}}}, "description": "A response from the `analyzeHumanNameBulk` endpoint."}, "LocationNameAnalyzeBulkRequest": {"required": ["items"], "type": "object", "properties": {"items": {"maxItems": 10, "minItems": 1, "type": "array", "description": "The individual operations to perform", "items": {"$ref": "#/components/schemas/LocationNameAnalyzeBulkRequestItem"}}}, "description": "A request to the `analyzeLocationNameBulk` endpoint."}, "LocationNameAnalyzeBulkResponse": {"required": ["items"], "type": "object", "properties": {"items": {"maxItems": 10, "minItems": 0, "type": "array", "description": "The individual operations performed. If the overall operation succeeded, then every operation in the request will have an item in the corresponding response, even if the response is an error.", "items": {"$ref": "#/components/schemas/LocationNameAnalyzeBulkResponseItem"}}}, "description": "A response from the `resolveLocationNameBulk` endpoint."}, "LocationNameResolveRequest": {"required": ["text"], "type": "object", "properties": {"text": {"maxLength": 240, "type": "string", "description": "The location string to resolve"}, "hl": {"maxLength": 2, "type": "string", "description": "The primary language in which to return location labels. The language should be provided as an [ISO 639-1 code](https://en.wikipedia.org/wiki/ISO_639-1). If provided, then the first name of each location will be in the given language, if such a name exists. Names in other languages may also be included in the response. Unrecognized languages are ignored."}}, "description": "A request to the `resolveLocationName` endpoint."}, "AnalyzeHumanRequest": {"type": "object", "properties": {"locationNameText": {"maxLength": 240, "type": "string", "description": "The location name to parse. *Deprecated. Use the `locationName` property instead.*"}, "locationName": {"$ref": "#/components/schemas/LocationNameInput"}, "humanNameText": {"maxLength": 240, "type": "string", "description": "The human name to parse. *Deprecated. Use the `humanName` property instead.*"}, "humanName": {"$ref": "#/components/schemas/HumanNameInput"}, "humanFaceImage": {"$ref": "#/components/schemas/Image"}, "humanFaceRegion": {"$ref": "#/components/schemas/ImageRegion"}, "humanFace": {"$ref": "#/components/schemas/HumanFaceInput"}, "hl": {"maxLength": 2, "type": "string", "description": "The primary language in which to return labels. The language should be provided as an [ISO 639-1 code](https://en.wikipedia.org/wiki/ISO_639-1). If provided, then the first name of each location will be in the given language, if such a name exists. Names in other languages may also be included in the response. Unrecognized languages are ignored."}}, "description": "A request to the `analyzeHuman` endpoint. At least one of `locationNameText`, `locationName`, `humanNameText`, `humanName`, `humanFaceImage`, and `humanFace` must be given.\n\nThe `locationNameText` property is **deprecated**. Use the `locationName` property instead. If both `locationNameText` and `locationName` are given, then `locationNameText` is ignored.\n\nThe `humanNameText` property is **deprecated**. Use the `humanName` property instead. If both `humanNameText` and `humanName` are given, then `humanNameText` is ignored.\n\nThe `humanFaceImage` and `humanFaceRegion` properties are **deprecated**. Use the `humanFace` property instead. If both `humanFace` and `humanFaceImage` are given, then `humanFaceImage` and `humanFaceRegion` are both ignored.\n"}, "ImageRegion": {"required": ["height", "width", "x", "y"], "type": "object", "properties": {"x": {"minimum": 0, "type": "integer", "description": "The leftmost boundary of this rectangle, inclusive.", "format": "int32"}, "y": {"minimum": 0, "type": "integer", "description": "The topmost boundary of this rectangle, inclusive.", "format": "int32"}, "width": {"minimum": 1, "type": "integer", "description": "The width of the rectangle, from left to right. The rightmost boundary of this rectangle is `x + width`, exclusive.", "format": "int32"}, "height": {"minimum": 1, "type": "integer", "description": "The height of the rectangle, from top to bottom. The bottommost boundary of this rectangle is `y + height`, exclusive.", "format": "int32"}}, "description": "A region of an image described as a rectangle aligned with the x and y axes. The coordinate system starts at the top-left corner, with x increasing in the left-to-right direction and y increasing in the top-to-bottom direction."}, "Gender": {"type": "string", "description": "One person's [gender](https://en.wikipedia.org/wiki/Gender", "enum": ["male", "female"]}, "HumanNameAnalyzeResponse": {"type": "object", "properties": {"confidence": {"maximum": 1, "minimum": 0, "type": "number", "description": "The likelihood that all matched parts are correct", "format": "float"}, "match": {"$ref": "#/components/schemas/HumanNameMatch"}, "givenNameConfidence": {"maximum": 1, "minimum": 0, "type": "number", "description": "The likelihood that the given name match is the correct parse among all valid, successful parses for this given name", "format": "float"}, "givenNameMatch": {"$ref": "#/components/schemas/HumanNamePart"}, "familyNameConfidence": {"maximum": 1, "minimum": 0, "type": "number", "description": "The likelihood that the family name match is the correct parse among all valid, successful parses for this family name", "format": "float"}, "familyNameMatch": {"$ref": "#/components/schemas/HumanNamePart"}, "age": {"$ref": "#/components/schemas/Age"}, "ageEstimate": {"$ref": "#/components/schemas/AgeEstimate"}, "gender": {"$ref": "#/components/schemas/Gender"}, "genderEstimate": {"$ref": "#/components/schemas/GenderEstimate"}, "race": {"$ref": "#/components/schemas/Race"}, "raceEstimate": {"$ref": "#/components/schemas/RaceEstimate"}, "country": {"$ref": "#/components/schemas/Country"}, "countryEstimate": {"$ref": "#/components/schemas/CountryEstimate"}}, "description": "A response to the `analyzeHumanName` endpoint"}, "HumanNameParseBulkRequest": {"required": ["items"], "type": "object", "properties": {"items": {"maxItems": 10, "minItems": 1, "type": "array", "items": {"$ref": "#/components/schemas/HumanNameParseBulkRequestItem"}}}, "description": "A request to the `parseHumanNameBulk` endpoint."}, "Image": {"required": ["type"], "type": "object", "properties": {"type": {"$ref": "#/components/schemas/ImageType"}, "binaryImageAttributes": {"$ref": "#/components/schemas/BinaryImageAttributes"}, "stagedImageAttributes": {"$ref": "#/components/schemas/StagedImageAttributes"}}, "description": "An image of type PNG or JPG. The image may up to 4096 x 4096 pixels in size."}, "BinaryImageAttributes": {"required": ["bytes"], "type": "object", "properties": {"bytes": {"maxLength": 715500, "type": "string", "description": "The image represented as base64-encoded binary data. The original image may not exceed 100KB in size.", "format": "byte"}}}, "LocalizedText": {"type": "object", "properties": {"language": {"type": "string", "description": "The language of the text, currently expressed as an [ISO 639-1 code](https://en.wikipedia.org/wiki/ISO_639-1). Additional language codes may be used in the future."}, "text": {"type": "string"}}, "description": "Localized text in the given language."}, "AgeEstimate": {"type": "object", "properties": {"under18": {"maximum": 1, "minimum": 0, "type": "number", "format": "float"}, "from18To24": {"maximum": 1, "minimum": 0, "type": "number", "format": "float"}, "from25To34": {"maximum": 1, "minimum": 0, "type": "number", "format": "float"}, "from35To44": {"maximum": 1, "minimum": 0, "type": "number", "format": "float"}, "from45To54": {"maximum": 1, "minimum": 0, "type": "number", "format": "float"}, "from55To64": {"maximum": 1, "minimum": 0, "type": "number", "format": "float"}, "over65": {"maximum": 1, "minimum": 0, "type": "number", "format": "float"}}, "description": "A discrete probability distribution modeling one person's likely age"}, "HumanNameParseBulkResponseItem": {"required": ["id", "response"], "type": "object", "properties": {"id": {"maxLength": 80, "minLength": 1, "type": "string", "description": "The id of the corresponding operation in the bulk request."}, "response": {"$ref": "#/components/schemas/HumanNameParseResponse"}}, "description": "One response in a `HumanNameParseBulkResponse`."}, "ImageFormat": {"type": "string", "enum": ["jpeg", "png"]}, "ImageType": {"type": "string", "description": "* `binary` - An image provided as base64-encoded binary data in the request\n", "enum": ["binary", "staged"]}, "HumanNameTemplatePreview": {"type": "object", "properties": {"text": {"maxLength": 240, "type": "string"}}, "description": "The name syntax that was matched during this parse"}, "HumanNameInput": {"required": ["type"], "type": "object", "properties": {"type": {"$ref": "#/components/schemas/HumanNameInputType"}, "countryHint": {"$ref": "#/components/schemas/Country"}, "textHumanNameInputAttributes": {"$ref": "#/components/schemas/TextHumanNameInputAttributes"}, "facetedHumanNameInputAttributes": {"$ref": "#/components/schemas/FacetedHumanNameInputAttributes"}}, "description": "A human name input"}, "HumanNameMultiparseNameMatch": {"type": "object", "properties": {"template": {"$ref": "#/components/schemas/HumanNameTemplatePreview"}, "givenName": {"$ref": "#/components/schemas/HumanNamePart"}, "middleName": {"$ref": "#/components/schemas/HumanNamePart"}, "secondMiddleName": {"$ref": "#/components/schemas/HumanNamePart"}, "nickName": {"$ref": "#/components/schemas/HumanNamePart"}, "familyName": {"$ref": "#/components/schemas/HumanNamePart"}, "secondFamilyName": {"$ref": "#/components/schemas/HumanNamePart"}, "age": {"$ref": "#/components/schemas/Age"}, "ageEstimate": {"$ref": "#/components/schemas/AgeEstimate"}, "gender": {"$ref": "#/components/schemas/Gender"}, "genderEstimate": {"$ref": "#/components/schemas/GenderEstimate"}, "race": {"$ref": "#/components/schemas/Race"}, "raceEstimate": {"$ref": "#/components/schemas/RaceEstimate"}, "country": {"$ref": "#/components/schemas/Country"}, "countryEstimate": {"$ref": "#/components/schemas/CountryEstimate"}}, "description": "A single name match in a multiparse response"}, "AnalyzeHumanFaceOutcome": {"type": "string", "description": "* `success` - The analysis of the indicated or only face in the image succeeded.\n* `failureNoSuchFace` - There is no face in the given image at the given region\n* `failureNoFaces` - The analysis failed because either (a) there are no faces in the image, or (b) there is no face in the given region.\n* `failureTooManyFaces` - The analysis failed because there is more than one face in the given image, or in the indicated region of the given image.\n* `failureImageTooBig` - The analysis failed because the image exceeded the maximum size, in pixels.\n* `failureBadImage` - The analysis failed because the image could not be understood.\n* `failureImageGone` - The staged image either is expired or does not exist.\n", "enum": ["success", "failureNoSuchFace", "failureNoFaces", "failureTooManyFaces", "failureImageTooBig", "failureBadImage", "failureImageGone"]}, "LocationNameAnalyzeResponse": {"type": "object", "properties": {"confidence": {"maximum": 1.0, "minimum": 0.0, "type": "number", "description": "The likelihood that the match is correctly resolved among all valid, successful parses for this location", "format": "float"}, "match": {"$ref": "#/components/schemas/LocationNameMatch"}, "countryConfidence": {"maximum": 1.0, "minimum": 0.0, "type": "number", "description": "The likelihood that the match is correctly resolved among all valid, successful parses for this location", "format": "float"}, "countryMatch": {"$ref": "#/components/schemas/LocationNameMatch"}, "stateConfidence": {"maximum": 1.0, "minimum": 0.0, "type": "number", "description": "The likelihood that the match is correctly resolved among all valid, successful parses for this location", "format": "float"}, "stateMatch": {"$ref": "#/components/schemas/LocationNameMatch"}, "cityConfidence": {"maximum": 1.0, "minimum": 0.0, "type": "number", "description": "The likelihood that the match is correctly resolved among all valid, successful parses for this location", "format": "float"}, "cityMatch": {"$ref": "#/components/schemas/LocationNameMatch"}, "country": {"$ref": "#/components/schemas/Country"}, "countryEstimate": {"$ref": "#/components/schemas/CountryEstimate"}}, "description": "A response from the `analyzeLocationName` endpoint."}, "SocialProfile": {"allOf": [{"$ref": "#/components/schemas/SocialProfilePreview"}, {"type": "object", "properties": {"name": {"maxLength": 80, "type": "string"}, "location": {"maxLength": 80, "type": "string"}, "biography": {"maxLength": 160, "type": "string"}, "picture": {"type": "string", "format": "url"}, "homepage": {"type": "string", "format": "url"}, "visibility": {"$ref": "#/components/schemas/SocialProfileVisibility"}, "verified": {"type": "boolean"}, "posts": {"type": "integer", "format": "int64"}, "followers": {"type": "integer", "format": "int64"}, "following": {"type": "integer", "format": "int64"}, "likes": {"type": "integer", "format": "int64"}, "createdAt": {"type": "string", "format": "date-time"}, "activeAt": {"type": "string", "format": "date-time"}}}]}, "AnalyzeSocialProfileBulkResponse": {"type": "object", "properties": {"items": {"maxItems": 10, "minItems": 1, "type": "array", "items": {"$ref": "#/components/schemas/AnalyzeSocialProfileBulkResponseItem"}}}}, "AnalyzeTwitterSocialProfileBulkRequestItem": {"required": ["id", "request"], "type": "object", "properties": {"id": {"maxLength": 80, "minLength": 1, "type": "string", "description": "An identifier for this item within its bulk request. Must be unique among all items in the request."}, "request": {"$ref": "#/components/schemas/AnalyzeTwitterSocialProfileRequest"}}}, "HumanNameMultiparseBulkRequestItem": {"required": ["id", "request"], "type": "object", "properties": {"id": {"maxLength": 80, "minLength": 1, "type": "string", "description": "An identifier for this item within its bulk request. Must be unique among all items in the request."}, "request": {"$ref": "#/components/schemas/HumanNameMultiparseRequest"}}, "description": "One request in a `HumanNameMultiparseBulkRequest`."}, "Coordinates": {"required": ["latitude", "longitude"], "type": "object", "properties": {"latitude": {"maximum": 180, "minimum": -180, "type": "number", "format": "double"}, "longitude": {"maximum": 180, "minimum": -180, "type": "number", "format": "double"}}, "description": "A latitude/longitude point in the WGS84 coordinating system."}, "LocationNameResolveBulkResponse": {"required": ["items"], "type": "object", "properties": {"items": {"maxItems": 10, "minItems": 0, "type": "array", "description": "The individual operations performed. If the overall operation succeeded, then every operation in the request will have an item in the corresponding response, even if the response is an error.", "items": {"$ref": "#/components/schemas/LocationNameResolveBulkResponseItem"}}}, "description": "A response from the `resolveLocationNameBulk` endpoint."}, "HumanFaceAnalyzeResponse": {"type": "object", "properties": {"outcome": {"$ref": "#/components/schemas/AnalyzeHumanFaceOutcome"}, "image": {"$ref": "#/components/schemas/ImageDescription"}, "confidence": {"maximum": 1, "minimum": 0, "type": "number", "description": "The likelihood that the analyzed region actually contains a face, as opposed to a different object that resembles a face.", "format": "float"}, "region": {"$ref": "#/components/schemas/ImageRegion"}, "age": {"$ref": "#/components/schemas/Age"}, "ageEstimate": {"$ref": "#/components/schemas/AgeEstimate"}, "gender": {"$ref": "#/components/schemas/Gender"}, "genderEstimate": {"$ref": "#/components/schemas/GenderEstimate"}, "race": {"$ref": "#/components/schemas/Race"}, "raceEstimate": {"$ref": "#/components/schemas/RaceEstimate"}}, "description": "A response to the `analyzeHumanFace` endpoint"}, "HumanNameAnalyzeRequest": {"required": ["familyName", "givenName"], "type": "object", "properties": {"givenName": {"maxLength": 80, "type": "string", "description": "The given name to analyze"}, "familyName": {"maxLength": 80, "type": "string", "description": "The family name to analyze"}, "countryHint": {"$ref": "#/components/schemas/Country"}}, "description": "A request to the `analyzeHumanName` endpoint"}, "AnalyzeTwitterSocialProfileBulkRequest": {"required": ["items"], "type": "object", "properties": {"items": {"maxItems": 10, "minItems": 1, "type": "array", "items": {"$ref": "#/components/schemas/AnalyzeTwitterSocialProfileBulkRequestItem"}}}}, "SingleBarreledHumanNamePartAttributes": {"type": "object", "properties": {}, "description": "A single-barreled, or non-hyphenated, name, e.g., \"Hoover\" in \"J. Edgar Hoover.\" Most name parts are of this type.\n"}, "HumanNameMultiparseResponse": {"type": "object", "properties": {"confidence": {"maximum": 1, "minimum": 0, "type": "number", "description": "The likelihood that the matches are the correct parse among all valid, successful parses for these names", "format": "float"}, "names": {"type": "array", "items": {"$ref": "#/components/schemas/HumanNameMultiparseNameMatch"}}}, "description": "A response from the `multiparseHumanNames` endpoint."}, "State": {"type": "string", "description": "An ISO 3166-2 country subdivision code", "format": "state"}, "HumanNameInputType": {"type": "string", "description": "* `text` - A full, unparsed name, e.g., \"Fox Mulder\"\n* `faceted` - A two-part human name represented as two facets, given name and family name, e.g., given name: \"Fox\", family name: \"Mulder\"\n", "enum": ["text", "faceted"]}, "CountryEstimate": {"type": "object", "additionalProperties": {"maximum": 1, "minimum": 0, "type": "number", "format": "float"}, "description": "A discrete probability distribution modeling one person's likely country of origin. Keys are [ISO 3166-1 alpha-2 codes](https://en.wikipedia.org/wiki/ISO_3166-1), e.g., `US`."}, "Country": {"type": "string", "description": "An ISO 3166-1 alpha-2 country code.", "format": "country"}, "HumanNameAnalyzeBulkRequest": {"required": ["items"], "type": "object", "properties": {"items": {"maxItems": 10, "minItems": 1, "type": "array", "items": {"$ref": "#/components/schemas/HumanNameAnalyzeBulkRequestItem"}}}, "description": "A request to the `analyzeHumanNameBulk` endpoint."}, "AnalyzeHumanResponse": {"type": "object", "properties": {"locationNameConfidence": {"maximum": 1, "minimum": 0, "type": "number", "description": "The likelihood that the location match is the correct parse among all valid, successful parses for this location", "format": "float"}, "locationNameMatch": {"$ref": "#/components/schemas/LocationNameMatch"}, "humanNameConfidence": {"maximum": 1, "minimum": 0, "type": "number", "description": "The likelihood that the name match is the correct parse among all valid, successful parses for this name", "format": "float"}, "humanNameMatch": {"$ref": "#/components/schemas/HumanNameMatch"}, "humanFaceOutcome": {"$ref": "#/components/schemas/AnalyzeHumanFaceOutcome"}, "humanFaceConfidence": {"maximum": 1, "minimum": 0, "type": "number", "description": "The likelihood that the analyzed region actually contains a face, as opposed to a different object that resembles a face.", "format": "float"}, "humanFaceRegion": {"$ref": "#/components/schemas/ImageRegion"}, "age": {"$ref": "#/components/schemas/Age"}, "ageEstimate": {"$ref": "#/components/schemas/AgeEstimate"}, "gender": {"$ref": "#/components/schemas/Gender"}, "genderEstimate": {"$ref": "#/components/schemas/GenderEstimate"}, "race": {"$ref": "#/components/schemas/Race"}, "raceEstimate": {"$ref": "#/components/schemas/RaceEstimate"}, "country": {"$ref": "#/components/schemas/Country"}, "countryEstimate": {"$ref": "#/components/schemas/CountryEstimate"}}, "description": "A response from the `analyzeHuman` endpoint"}, "DetectedHumanFace": {"type": "object", "properties": {"region": {"$ref": "#/components/schemas/ImageRegion"}}, "description": "A region of an image containing a likely human face"}, "FacetedHumanNameInputAttributes": {"type": "object", "properties": {"givenName": {"maxLength": 80, "type": "string", "description": "The given part of the name"}, "familyName": {"maxLength": 80, "type": "string", "description": "The family part of the name"}}, "description": "A full human name represented as two facets: `givenName` and `familyName`. At least one of `givenName` and `familyName` must be given.\n"}, "BinaryData": {"type": "string", "format": "binary"}, "ImageDescription": {"type": "object", "properties": {"format": {"$ref": "#/components/schemas/ImageFormat"}, "width": {"type": "integer", "description": "The detected width of the given image, in pixels", "format": "int32"}, "height": {"type": "integer", "description": "The detected height of the given image, in pixels", "format": "int32"}, "length": {"type": "integer", "description": "The number of bytes in the serialized image", "format": "int64"}}}, "SocialProfileVisibility": {"type": "string", "description": "One social profile's access level, which can take the following values:\n\n* `public` - The account is public and fully accessible to all users\n* `private` - The account is private and accessible only to a limited group\n* `protected` - The account is public but only partially accessible to all users\n", "enum": ["public", "private", "protected"]}, "HumanNameMultiparseBulkResponse": {"required": ["items"], "type": "object", "properties": {"items": {"type": "array", "items": {"$ref": "#/components/schemas/HumanNameMultiparseBulkResponseItem"}}}, "description": "A response from the `multiparseHumanNamesBulk` endpoint."}, "LocationNameResolveBulkRequest": {"required": ["items"], "type": "object", "properties": {"items": {"maxItems": 10, "minItems": 1, "type": "array", "description": "The individual operations to perform", "items": {"$ref": "#/components/schemas/LocationNameResolveBulkRequestItem"}}}, "description": "A request to the `resolveLocationNameBulk` endpoint."}, "HumanFaceDetectRequest": {"required": ["image"], "type": "object", "properties": {"image": {"$ref": "#/components/schemas/Image"}}, "description": "A request to the `detectHumanFaces` endpoint"}, "FacetedLocationNameInputAttributes": {"type": "object", "properties": {"country": {"maxLength": 80, "type": "string"}, "state": {"maxLength": 80, "type": "string"}, "city": {"maxLength": 80, "type": "string"}}, "description": "A full location name represented as three facets: country, state, and city. Each facet is unstructured. At least one of country, state, and city must be given.\n"}, "HumanFaceAnalyzeRequest": {"required": ["image"], "type": "object", "properties": {"image": {"$ref": "#/components/schemas/Image"}, "region": {"$ref": "#/components/schemas/ImageRegion"}}, "description": "A request to the `analyzeHumanFace` endpoint"}, "LocationNameInputType": {"type": "string", "description": "* `text` - A full, unparsed location name, e.g., \"Alexandria, VA\"\n* `faceted` - A parsed name represented by up to 3 facets, country name, state name, and city name, e.g., state name: \"VA\", city name: \"Alexandria\"\n", "enum": ["text", "faceted"]}, "RaceEstimate": {"type": "object", "properties": {"hispanic": {"maximum": 1, "minimum": 0, "type": "number", "format": "float"}, "white": {"maximum": 1, "minimum": 0, "type": "number", "format": "float"}, "black": {"maximum": 1, "minimum": 0, "type": "number", "format": "float"}, "asianPacificIslander": {"maximum": 1, "minimum": 0, "type": "number", "format": "float"}, "americanIndian": {"maximum": 1, "minimum": 0, "type": "number", "format": "float"}, "twoPlusRaces": {"maximum": 1, "minimum": 0, "type": "number", "format": "float"}}, "description": "A discrete probability distribution modeling one person's likely race"}, "TextHumanNameInputAttributes": {"required": ["text"], "type": "object", "properties": {"text": {"maxLength": 80, "type": "string", "description": "The full, unparsed name"}}, "description": "A full, unparsed name"}, "HumanNameParseRequest": {"required": ["text"], "type": "object", "properties": {"text": {"maxLength": 240, "type": "string", "description": "The human name to parse"}, "countryHint": {"$ref": "#/components/schemas/Country"}}, "description": "A request to the `parseHumanName` endpoint."}, "HumanNamePartType": {"type": "string", "description": "* `initial` - A single-letter abbreviation of a name, e.g., \"J.\" in \"J. Edgar Hoover.\" All of given, middle, and family names can be initials.\n* `single` - A single-barreled, or non-hyphenated, name, e.g., \"Hoover\" in \"J. Edgar Hoover.\" Most name parts are of this type.\n* `double` - A [double-barreled](https://en.wikipedia.org/wiki/Double-barrelled_name), or hyphenated, name, e.g., \"Louis-Dreyfus\" in \"Julia Louis-Dreyfus.\" Both given names and family names may be double-barreled.\n* `free` - HumanGraphics uses a statistical name parser, so most name parts are backed by statistical evidence. However, names are not a \"closed\" system, so rare names, new names, and novel spellings of existing names all must be matched. Therefore, \"free\" name parts that \"look like\" part of a name can be accepted based on syntax as opposed to training.\n* `nick` - A sobriquet enclosed in quote marks (i.e., 'single quotes', \"double quotes\", \u00abguillemets\u00bb, etc.), e.g., \"Maverick\" in \"Pete 'Maverick' Mitchell.\"\n", "enum": ["initial", "single", "double", "free", "nick"]}, "TextLocationNameInputAttributes": {"required": ["text"], "type": "object", "properties": {"text": {"maxLength": 80, "type": "string"}}, "description": "A full, unparsed location name"}, "LocationNameResolveResponse": {"type": "object", "properties": {"confidence": {"maximum": 1, "minimum": 0, "type": "number", "description": "The likelihood that the match is correctly resolved among all valid, successful parses for this location", "format": "float"}, "match": {"$ref": "#/components/schemas/LocationNameMatch"}, "country": {"$ref": "#/components/schemas/Country"}, "countryEstimate": {"$ref": "#/components/schemas/CountryEstimate"}}, "description": "A response from the `resolveLocationName` endpoint."}, "LocationNameAnalyzeBulkRequestItem": {"required": ["id", "request"], "type": "object", "properties": {"id": {"maxLength": 80, "minLength": 1, "type": "string", "description": "An identifier for this item within its bulk request. Must be unique among all items in the request."}, "request": {"$ref": "#/components/schemas/LocationNameAnalyzeRequest"}}, "description": "One request in a `LocationNameAnalyzeBulkRequest`"}, "DetectHumanFacesOutcome": {"type": "string", "description": "* `success` - The detection of faces in the image succeeded.\n* `failureImageTooBig` - The detection failed because the image was too large. Images may be up to 4096 x 4096 pixels in size.\n* `failureBadImage` - The detection failed because the image could not be understood.\n* `failureImageGone` - The staged image either is expired or does not exist.\n", "enum": ["success", "failureImageTooBig", "failureBadImage", "failureImageGone"]}, "HumanNameAnalyzeBulkRequestItem": {"required": ["id", "request"], "type": "object", "properties": {"id": {"maxLength": 80, "minLength": 1, "type": "string", "description": "An identifier for this item within its bulk request. Must be unique among all items in the request."}, "request": {"$ref": "#/components/schemas/HumanNameAnalyzeRequest"}}, "description": "One request in a `HumanNameAnalyzeBulkRequest`."}, "LocationNameResolveBulkResponseItem": {"required": ["id", "response"], "type": "object", "properties": {"id": {"maxLength": 80, "minLength": 1, "type": "string", "description": "The id of the corresponding operation in the bulk request."}, "response": {"$ref": "#/components/schemas/LocationNameResolveResponse"}}, "description": "One response in a `LocationNameResolveBulkResponse`"}, "HumanNameAnalyzeBulkResponseItem": {"required": ["id", "response"], "type": "object", "properties": {"id": {"maxLength": 80, "minLength": 1, "type": "string", "description": "The id of the corresponding operation in the bulk request."}, "response": {"$ref": "#/components/schemas/HumanNameAnalyzeResponse"}}, "description": "One response in a `HumanNameAnalyzeBulkResponse`."}, "StateLocation": {"required": ["country", "id", "names"], "type": "object", "properties": {"names": {"minItems": 1, "type": "array", "description": "The name(s) of this location in various languages. If a host language (`hl`) was requested, the the first element in this array will be the name of the location in the given language, if it exists. This list of names is never empty.", "items": {"$ref": "#/components/schemas/LocalizedText"}}, "coordinates": {"$ref": "#/components/schemas/Coordinates"}, "country": {"$ref": "#/components/schemas/Country"}, "region": {"$ref": "#/components/schemas/Country"}, "id": {"$ref": "#/components/schemas/State"}}, "description": "The state part of a location match."}, "InitialHumanNamePartAttributes": {"type": "object", "properties": {}, "description": "A single-letter abbreviation of a name, e.g., \"J.\" in \"J. Edgar Hoover.\" All of given, middle, and family names can be initials.\n"}, "Race": {"type": "string", "description": "One person's [race](https://en.wikipedia.org/wiki/Race_%28human_categorization%29). These values follow [the labels and definitions laid out in the 2010 US Census](https://www.census.gov/content/dam/Census/library/publications/2011/dec/c2010br-02.pdf), and can be interpreted as:\n\n* `white` - Non-Hispanic White Alone\n* `black` - Non-Hispanic Black or African American Alone,\n* `asianPacificIslander` - Non-Hispanic American Indian and Alaska Native Alone\n* `americanIndian` - Non-Hispanic Asian and Native Hawaiian and Other Pacific Islander Alone\n* `twoPlusRaces` - Non-Hispanic Two or More Races\n* `hispanic` - Hispanic or Latino origin\n", "enum": ["white", "black", "asianPacificIslander", "americanIndian", "twoPlusRaces", "hispanic"]}, "HumanNameMultiparseRequest": {"required": ["text"], "type": "object", "properties": {"text": {"maxLength": 240, "type": "string", "description": "The human name(s) to parse"}, "countryHint": {"$ref": "#/components/schemas/Country"}}, "description": "A request to the `multiparseHumanNames` endpoint."}, "DoubleBarreledHumanNameSubpart": {"required": ["matchedText", "type"], "type": "object", "properties": {"type": {"$ref": "#/components/schemas/HumanNamePartType"}, "matchedText": {"maxLength": 80, "type": "string", "description": "The portion of text from the given input that was matched to this name"}, "singleBarreledHumanNamePartAttributes": {"$ref": "#/components/schemas/SingleBarreledHumanNamePartAttributes"}}, "description": "One part of a name match"}, "Age": {"type": "string", "description": "A person's age in whole years, bucketed into ranges. For example, a person is considered 25 years old starting at midnight on their 25th birthday, inclusive, until midnight on their 26th birthday, exclusive.\n\n* `under18` - The person's age is strictly less than 18 years\n* `from18To24` - The person's age is from 18 to 24 years, inclusive\n* `from25To34` - The person's age is from 25 to 34 years, inclusive\n* `from35To44` - The person's age is from 35 to 44 years, inclusive\n* `from45To54` - The person's age is from 45 to 54 years, inclusive\n* `from55To64` - The person's age is from 55 to 64 years, inclusive\n* `over65` - The person's age is greater than or equal to 65 years", "enum": ["under18", "from18To24", "from25To34", "from35To44", "from45To54", "from55To64", "over65"]}, "AnalyzeSocialProfileBulkResponseItem": {"type": "object", "properties": {"id": {"maxLength": 80, "minLength": 1, "type": "string", "description": "The id of the corresponding operation in the bulk request.\""}, "response": {"$ref": "#/components/schemas/AnalyzeSocialProfileResponse"}}}, "LocationNameMatch": {"required": ["country", "type"], "type": "object", "properties": {"type": {"$ref": "#/components/schemas/LocationType"}, "matchedText": {"maxLength": 240, "type": "string", "description": "The portion of text from the given input that was matched to this location"}, "template": {"$ref": "#/components/schemas/LocationNameTemplatePreview"}, "country": {"$ref": "#/components/schemas/CountryLocation"}, "state": {"$ref": "#/components/schemas/StateLocation"}, "city": {"$ref": "#/components/schemas/CityLocation"}}, "description": "A location match from resolving a location name."}, "HumanFaceInput": {"required": ["humanFaceImage"], "type": "object", "properties": {"image": {"$ref": "#/components/schemas/Image"}, "region": {"$ref": "#/components/schemas/ImageRegion"}}, "description": "A human face represented as an image with an optional region annotation indicating which portion of the image contains the face of interest. If the given image contains exactly one face, then the `region` is optional. Otherwise, if the image contains more than one face, then the `region` field is required in order for the face analysis to succeed. If given, this value should match a region returned from a previous call to the `detectHumanFaces` endpoint for the given image.\n"}, "LocationNameInput": {"required": ["type"], "type": "object", "properties": {"type": {"$ref": "#/components/schemas/LocationNameInputType"}, "textLocationNameInputAttributes": {"$ref": "#/components/schemas/TextLocationNameInputAttributes"}, "facetedLocationNameInputAttributes": {"$ref": "#/components/schemas/FacetedLocationNameInputAttributes"}}, "description": "A location name input"}, "SocialProfilePreview": {"type": "object", "properties": {"network": {"$ref": "#/components/schemas/SocialNetwork"}, "id": {"maxLength": 80, "type": "string"}, "handle": {"maxLength": 80, "type": "string"}}}, "HumanNameMultiparseBulkResponseItem": {"required": ["id", "response"], "type": "object", "properties": {"id": {"maxLength": 80, "minLength": 1, "type": "string", "description": "The id of the corresponding operation in the bulk request."}, "response": {"$ref": "#/components/schemas/HumanNameMultiparseResponse"}}, "description": "One response in a `HumanNameMultiparseBulkResponse`."}, "StagedImageAttributes": {"required": ["id"], "type": "object", "properties": {"id": {"type": "string", "description": "An image ID returned by the `stageImage` endpoint", "format": "StagedImageId"}}}, "LocationNameAnalyzeRequest": {"type": "object", "properties": {"country": {"maxLength": 80, "type": "string", "description": "The text that describes the country"}, "state": {"maxLength": 80, "type": "string", "description": "The text that describes the state"}, "city": {"maxLength": 80, "type": "string", "description": "The text that describes the city"}, "hl": {"maxLength": 2, "type": "string", "description": "The primary language in which to return location labels. The language should be provided as an [ISO 639-1 code](https://en.wikipedia.org/wiki/ISO_639-1). If provided, then the first name of each location will be in the given language, if such a name exists. Names in other languages may also be included in the response. Unrecognized languages are ignored."}}, "description": "A request to the `analyzeLocationName` endpoint."}, "HumanFaceDetectResponse": {"type": "object", "properties": {"outcome": {"$ref": "#/components/schemas/DetectHumanFacesOutcome"}, "image": {"$ref": "#/components/schemas/ImageDescription"}, "detectedFaces": {"type": "array", "items": {"$ref": "#/components/schemas/DetectedHumanFace"}}, "detectedFacesTruncated": {"type": "boolean", "description": "Contains `true` if not all detected faces appear in `detectedFaces` because there were more than the maximum allowed faces and the list had to be truncated, or `false` otherwose"}}, "description": "A response from the `detectHumanFaces` endpoint."}, "CountryLocation": {"required": ["id", "names"], "type": "object", "properties": {"id": {"$ref": "#/components/schemas/Country"}, "names": {"minItems": 1, "type": "array", "description": "The name(s) of this location in various languages. If a host language (`hl`) was requested, the the first element in this array will be the name of the location in the given language, if it exists. This list of names is never empty.", "items": {"$ref": "#/components/schemas/LocalizedText"}}, "coordinates": {"$ref": "#/components/schemas/Coordinates"}}, "description": "The country part of a location match."}, "AnalyzeTwitterSocialProfileRequest": {"type": "object", "properties": {"id": {"maxLength": 80, "type": "string", "description": "The numerical ID of the Twitter account to analyze. Only one of `id` and `handle` should be given. If both `id` and `handle` are given, then `id` is used."}, "handle": {"maxLength": 80, "type": "string", "description": "The user-readable screen name of the Twitter account to analyze. Only one of `id` and `handle` should be given."}}}, "HumanNameParseBulkResponse": {"required": ["items"], "type": "object", "properties": {"items": {"type": "array", "items": {"$ref": "#/components/schemas/HumanNameParseBulkResponseItem"}}}, "description": "A response from the `parseHumanNameBulk` endpoint."}, "NicknameHumanNamePartAttributes": {"type": "object", "properties": {}, "description": "A sobriquet enclosed in quote marks (i.e., 'single quotes', \"double quotes\", \u00abguillemets\u00bb, etc.), e.g., \"Maverick\" in \"Pete 'Maverick' Mitchell.\"\n"}, "HumanNameParseBulkRequestItem": {"required": ["id", "request"], "type": "object", "properties": {"id": {"maxLength": 80, "minLength": 1, "type": "string", "description": "An identifier for this item within its bulk request. Must be unique among all items in the request."}, "request": {"$ref": "#/components/schemas/HumanNameParseRequest"}}, "description": "One request in a `HumanNameParseBulkRequest`."}, "FreeHumanNamePartAttributes": {"type": "object", "properties": {}, "description": "HumanGraphics uses a statistical name parser, so most name parts are backed by statistical evidence. However, names are not a \"closed\" system, so rare names, new names, and novel spellings of existing names all must be matched. Therefore, \"free\" name parts that \"look like\" part of a name can be accepted based on syntax as opposed to training.\n"}, "LocationNameTemplatePreview": {"type": "object", "properties": {"text": {"maxLength": 240, "type": "string"}}, "description": "The name syntax that was matched during this resolution"}, "DoubleBarreledHumanNamePartAttributes": {"required": ["firstPart", "secondPart"], "type": "object", "properties": {"firstPart": {"$ref": "#/components/schemas/DoubleBarreledHumanNameSubpart"}, "secondPart": {"$ref": "#/components/schemas/DoubleBarreledHumanNameSubpart"}}, "description": "A [double-barreled](https://en.wikipedia.org/wiki/Double-barrelled_name), or hyphenated, name, e.g., \"Louis-Dreyfus\" in \"Julia Louis-Dreyfus.\" Both given names and family names may be double-barreled. The `firstPart` and `secondPart` properties both contain a `HumanNamePart` of type `single`.\n"}, "GenderEstimate": {"type": "object", "properties": {"male": {"maximum": 1, "minimum": 0, "type": "number", "format": "float"}, "female": {"maximum": 1, "minimum": 0, "type": "number", "format": "float"}}, "description": "A discrete probability distribution modeling one person's likely self-identified gender"}, "CityLocation": {"required": ["country", "id", "names"], "type": "object", "properties": {"names": {"minItems": 1, "type": "array", "description": "The name(s) of this location in various languages. If a host language (`hl`) was requested, the the first element in this array will be the name of the location in the given language, if it exists. This list of names is never empty.", "items": {"$ref": "#/components/schemas/LocalizedText"}}, "coordinates": {"$ref": "#/components/schemas/Coordinates"}, "country": {"$ref": "#/components/schemas/Country"}, "state": {"$ref": "#/components/schemas/State"}, "region": {"$ref": "#/components/schemas/State"}, "id": {"type": "string", "description": "The ID of this city, which is an arbitrary value unrelated to the city itself.", "format": "City"}}, "description": "The city part of a location match."}, "HumanNamePart": {"required": ["matchedText", "type"], "type": "object", "properties": {"type": {"$ref": "#/components/schemas/HumanNamePartType"}, "matchedText": {"maxLength": 80, "type": "string", "description": "The portion of text from the given input that was matched to this name"}, "initialHumanNamePartAttributes": {"$ref": "#/components/schemas/InitialHumanNamePartAttributes"}, "singleBarreledHumanNamePartAttributes": {"$ref": "#/components/schemas/SingleBarreledHumanNamePartAttributes"}, "doubleBarreledHumanNamePartAttributes": {"$ref": "#/components/schemas/DoubleBarreledHumanNamePartAttributes"}, "nicknameHumanNamePartAttributes": {"$ref": "#/components/schemas/NicknameHumanNamePartAttributes"}, "freeHumanNamePartAttributes": {"$ref": "#/components/schemas/FreeHumanNamePartAttributes"}}, "description": "One part of a name match"}, "LocationNameResolveBulkRequestItem": {"required": ["id", "request"], "type": "object", "properties": {"id": {"maxLength": 80, "minLength": 1, "type": "string", "description": "An identifier for this item within its bulk request. Must be unique among all items in the request."}, "request": {"$ref": "#/components/schemas/LocationNameResolveRequest"}}, "description": "One request in a `LocationNameResolveBulkRequest`"}, "SocialNetwork": {"type": "string", "enum": ["twitter"]}, "HumanNameMultiparseBulkRequest": {"required": ["items"], "type": "object", "properties": {"items": {"maxItems": 10, "minItems": 1, "type": "array", "items": {"$ref": "#/components/schemas/HumanNameMultiparseBulkRequestItem"}}}, "description": "A request to the `multiparseHumanNamesBulk` endpoint."}, "HumanNameParseResponse": {"type": "object", "properties": {"confidence": {"maximum": 1, "minimum": 0, "type": "number", "description": "The likelihood that the match is the correct parse among all valid, successful parses for this name", "format": "float"}, "match": {"$ref": "#/components/schemas/HumanNameMatch"}, "age": {"$ref": "#/components/schemas/Age"}, "ageEstimate": {"$ref": "#/components/schemas/AgeEstimate"}, "gender": {"$ref": "#/components/schemas/Gender"}, "genderEstimate": {"$ref": "#/components/schemas/GenderEstimate"}, "race": {"$ref": "#/components/schemas/Race"}, "raceEstimate": {"$ref": "#/components/schemas/RaceEstimate"}, "country": {"$ref": "#/components/schemas/Country"}, "countryEstimate": {"$ref": "#/components/schemas/CountryEstimate"}}, "description": "A response from the `parseHumanName` endpoint."}, "ErrorMessage": {"type": "object", "properties": {"type": {"type": "string", "format": "url"}, "title": {"type": "string"}, "status": {"type": "integer", "format": "int32"}, "detail": {"type": "string"}, "instance": {"type": "string"}}}, "LocationType": {"type": "string", "description": "* `country` - A location with an ISO-3166-1 code\n* `state` - A location with an ISO 3166-2 code\n* `city` - A human settlement with no ISO 3166 code\n", "enum": ["country", "state", "city"]}, "HumanNameMatch": {"type": "object", "properties": {"template": {"$ref": "#/components/schemas/HumanNameTemplatePreview"}, "givenName": {"$ref": "#/components/schemas/HumanNamePart"}, "middleName": {"$ref": "#/components/schemas/HumanNamePart"}, "secondMiddleName": {"$ref": "#/components/schemas/HumanNamePart"}, "nickName": {"$ref": "#/components/schemas/HumanNamePart"}, "familyName": {"$ref": "#/components/schemas/HumanNamePart"}, "secondFamilyName": {"$ref": "#/components/schemas/HumanNamePart"}}, "description": "A match of one human name"}, "AnalyzeSocialProfileResponse": {"type": "object", "properties": {"socialProfileExists": {"type": "boolean", "description": "Whether or not the requested social profile exists."}, "socialProfile": {"$ref": "#/components/schemas/SocialProfile"}, "socialProfilePicture": {"$ref": "#/components/schemas/ImageDescription"}, "locationNameConfidence": {"maximum": 1, "minimum": 0, "type": "number", "description": "The likelihood that the location match is the correct parse among all valid, successful parses for this location", "format": "float"}, "locationNameMatch": {"$ref": "#/components/schemas/LocationNameMatch"}, "humanNameConfidence": {"maximum": 1, "minimum": 0, "type": "number", "description": "The likelihood that the name match is the correct parse among all valid, successful parses for this name", "format": "float"}, "humanNameMatch": {"$ref": "#/components/schemas/HumanNameMatch"}, "humanFaceOutcome": {"$ref": "#/components/schemas/AnalyzeHumanFaceOutcome"}, "humanFaceConfidence": {"maximum": 1, "minimum": 0, "type": "number", "description": "The likelihood that the analyzed region actually contains a face, as opposed to a different object that resembles a face.", "format": "float"}, "humanFaceRegion": {"$ref": "#/components/schemas/ImageRegion"}, "age": {"$ref": "#/components/schemas/Age"}, "ageEstimate": {"$ref": "#/components/schemas/AgeEstimate"}, "gender": {"$ref": "#/components/schemas/Gender"}, "genderEstimate": {"$ref": "#/components/schemas/GenderEstimate"}, "race": {"$ref": "#/components/schemas/Race"}, "raceEstimate": {"$ref": "#/components/schemas/RaceEstimate"}, "country": {"$ref": "#/components/schemas/Country"}, "countryEstimate": {"$ref": "#/components/schemas/CountryEstimate"}}}}, "securitySchemes": {"api_key": {"type": "apiKey", "name": "x-api-key", "in": "header"}, "backend": {"type": "apiKey", "name": "authorization", "in": "header"}}}}