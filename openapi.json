{
  "components": {
    "headers": {
      "X-API-Credits": {
        "description": "The cost of this API call, in credits",
        "schema": {
          "type": "integer"
        }
      }
    },
    "responses": {
      "BadRequest400": {
        "content": {
          "application/json": {
            "example": {
              "description": "The given request body could not be parsed as JSON.",
              "status": 400,
              "title": "Request body could not be parsed as JSON",
              "type": "https://www.humangraphics.io/problems/invalid-json"
            },
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        },
        "description": "Bad request. The given request body could not be parsed as JSON."
      },
      "ContentTooLarge413": {
        "content": {
          "application/json": {
            "example": {
              "detail": "The request body is too large. Request bodies must not exceed 1MB in size.",
              "status": 413,
              "title": "Content too large",
              "type": "https://www.humangraphics.io/problems/content-too-large"
            },
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        },
        "description": "Content too large. Request bodies must not exceed 1MB in size."
      },
      "Forbidden403": {
        "content": {
          "application/json": {
            "example": {
              "detail": "This method is not included in the current API plan. Visit humangraphics.io to upgrade your plan.",
              "status": 403,
              "title": "Forbidden",
              "type": "https://www.humangraphics.io/problems/forbidden"
            },
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        },
        "description": "Forbidden. This method is not included in the current API plan. To gain access to this method, [upgrade the current plan](https://www.humangraphics.io/pricing) or [contact sales](mailto:sales@humangraphics.io)."
      },
      "TooManyRequests429": {
        "content": {
          "application/json": {
            "example": {
              "detail": "The user has exceeded the current plan's rate limit.",
              "status": 429,
              "title": "Too Many Requests",
              "type": "https://www.humangraphics.io/problems/too-many-requests"
            },
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        },
        "description": "Too many requests. The user has exceeded the current plan's rate limit. To increase the available rate limit, [upgrade the current plan](https://www.humangraphics.io/pricing) or [contact sales](mailto:sales@humangraphics.io)."
      },
      "Unauthorized401": {
        "content": {
          "application/json": {
            "example": {
              "description": "This method requires valid credentials, but none were provided.",
              "status": 401,
              "title": "Unauthorized",
              "type": "https://www.humangraphics.io/problems/unauthorized"
            },
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        },
        "description": "Unauthorized. This method requires valid credentials, but none were provided."
      },
      "UnprocessableEntity422": {
        "content": {
          "application/json": {
            "example": {
              "detail": "Property 'items[0].request.text' value is not of the correct type",
              "status": 422,
              "title": "Invalid request body",
              "type": "https://www.humangraphics.io/problems/invalid-request-body"
            },
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        },
        "description": "Unprocessable entity. The request body could not be parsed into the required input. The detail message should provide more information about problem and how to fix it."
      },
      "UnsupportedMediaType415": {
        "content": {
          "application/json": {
            "example": {
              "detail": "This method expects request bodies with content type 'application/json'. Did you forget to set the 'Content-Type' request header?",
              "status": 415,
              "title": "Unsupported media type",
              "type": "https://www.humangraphics.io/problems/unsupported-media-type"
            },
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        },
        "description": "Unsupported media type. This method expects request bodies with content type 'application/json'. Did you forget to set the 'Content-Type' request header?"
      }
    },
    "schemas": {
      "Age": {
        "description": "A person's age in whole years, bucketed into ranges. For example, a person is considered 25 years old starting at midnight on their 25th birthday, inclusive, until midnight on their 26th birthday, exclusive.\n\n* `under18` - The person's age is strictly less than 18 years\n* `from18To24` - The person's age is from 18 to 24 years, inclusive\n* `from25To34` - The person's age is from 25 to 34 years, inclusive\n* `from35To44` - The person's age is from 35 to 44 years, inclusive\n* `from45To54` - The person's age is from 45 to 54 years, inclusive\n* `from55To64` - The person's age is from 55 to 64 years, inclusive\n* `over65` - The person's age is greater than or equal to 65 years",
        "enum": [
          "under18",
          "from18To24",
          "from25To34",
          "from35To44",
          "from45To54",
          "from55To64",
          "over65"
        ],
        "type": "string"
      },
      "AgeEstimate": {
        "description": "A discrete probability distribution modeling one person's likely age",
        "properties": {
          "from18To24": {
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "from25To34": {
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "from35To44": {
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "from45To54": {
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "from55To64": {
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "over65": {
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "under18": {
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          }
        },
        "type": "object"
      },
      "AnalyzeHumanFaceOutcome": {
        "description": "* `success` - The analysis of the indicated or only face in the image succeeded.\n* `failureNoSuchFace` - There is no face in the given image at the given region\n* `failureNoFaces` - The analysis failed because either (a) there are no faces in the image, or (b) there is no face in the given region.\n* `failureTooManyFaces` - The analysis failed because there is more than one face in the given image, or in the indicated region of the given image.\n* `failureImageTooBig` - The analysis failed because the image exceeded the maximum size, in pixels.\n* `failureBadImage` - The analysis failed because the image could not be understood.\n",
        "enum": [
          "success",
          "failureNoSuchFace",
          "failureNoFaces",
          "failureTooManyFaces",
          "failureImageTooBig",
          "failureBadImage"
        ],
        "type": "string"
      },
      "AnalyzeHumanRequest": {
        "description": "A request to the `analyzeHuman` endpoint. At least one of `locationNameText`, `locationName`, `humanNameText`, `humanName`, `humanFaceImage`, and `humanFace` must be given.\n\nThe `locationNameText` property is **deprecated**. Use the `locationName` property instead. If both `locationNameText` and `locationName` are given, then `locationNameText` is ignored.\n\nThe `humanNameText` property is **deprecated**. Use the `humanName` property instead. If both `humanNameText` and `humanName` are given, then `humanNameText` is ignored.\n\nThe `humanFaceImage` and `humanFaceRegion` properties are **deprecated**. Use the `humanFace` property instead. If both `humanFace` and `humanFaceImage` are given, then `humanFaceImage` and `humanFaceRegion` are both ignored.\n",
        "properties": {
          "hl": {
            "description": "The primary language in which to return labels. The language should be provided as an [ISO 639-1 code](https://en.wikipedia.org/wiki/ISO_639-1). If provided, then the first name of each location will be in the given language, if such a name exists. Names in other languages may also be included in the response. Unrecognized languages are ignored.",
            "maxLength": 2,
            "type": "string"
          },
          "humanFace": {
            "$ref": "#/components/schemas/HumanFaceInput"
          },
          "humanFaceImage": {
            "$ref": "#/components/schemas/Image"
          },
          "humanFaceRegion": {
            "$ref": "#/components/schemas/ImageRegion"
          },
          "humanName": {
            "$ref": "#/components/schemas/HumanNameInput"
          },
          "humanNameText": {
            "description": "The human name to parse. *Deprecated. Use the `humanName` property instead.*",
            "maxLength": 240,
            "type": "string"
          },
          "locationName": {
            "$ref": "#/components/schemas/LocationNameInput"
          },
          "locationNameText": {
            "description": "The location name to parse. *Deprecated. Use the `locationName` property instead.*",
            "maxLength": 240,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AnalyzeHumanResponse": {
        "description": "A response from the `analyzeHuman` endpoint",
        "properties": {
          "age": {
            "$ref": "#/components/schemas/Age"
          },
          "ageEstimate": {
            "$ref": "#/components/schemas/AgeEstimate"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "countryEstimate": {
            "$ref": "#/components/schemas/CountryEstimate"
          },
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "genderEstimate": {
            "$ref": "#/components/schemas/GenderEstimate"
          },
          "humanFaceConfidence": {
            "description": "The likelihood that the analyzed region actually contains a face, as opposed to a different object that resembles a face.",
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "humanFaceOutcome": {
            "$ref": "#/components/schemas/AnalyzeHumanFaceOutcome"
          },
          "humanNameConfidence": {
            "description": "The likelihood that the name match is the correct parse among all valid, successful parses for this name",
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "humanNameMatch": {
            "$ref": "#/components/schemas/HumanNameMatch"
          },
          "locationNameConfidence": {
            "description": "The likelihood that the location match is the correct parse among all valid, successful parses for this location",
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "locationNameMatch": {
            "$ref": "#/components/schemas/LocationNameMatch"
          },
          "race": {
            "$ref": "#/components/schemas/Race"
          },
          "raceEstimate": {
            "$ref": "#/components/schemas/RaceEstimate"
          }
        },
        "type": "object"
      },
      "AnalyzeInstagramSocialProfileRequest": {
        "properties": {
          "handle": {
            "description": "The user-readable screen name of the Instagram account to analyze. Only one of `id` and `handle` should be given.",
            "maxLength": 80,
            "type": "string"
          },
          "id": {
            "description": "The numerical ID of the Instagram account to analyze. Only one of `id` and `handle` should be given. If both `id` and `handle` are given, then `id` is used.",
            "maxLength": 80,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AnalyzeSocialProfileResponse": {
        "properties": {
          "age": {
            "$ref": "#/components/schemas/Age"
          },
          "ageEstimate": {
            "$ref": "#/components/schemas/AgeEstimate"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "countryEstimate": {
            "$ref": "#/components/schemas/CountryEstimate"
          },
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "genderEstimate": {
            "$ref": "#/components/schemas/GenderEstimate"
          },
          "humanFaceConfidence": {
            "description": "The likelihood that the analyzed region actually contains a face, as opposed to a different object that resembles a face.",
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "humanFaceOutcome": {
            "$ref": "#/components/schemas/AnalyzeHumanFaceOutcome"
          },
          "humanNameConfidence": {
            "description": "The likelihood that the name match is the correct parse among all valid, successful parses for this name",
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "humanNameMatch": {
            "$ref": "#/components/schemas/HumanNameMatch"
          },
          "locationNameConfidence": {
            "description": "The likelihood that the location match is the correct parse among all valid, successful parses for this location",
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "locationNameMatch": {
            "$ref": "#/components/schemas/LocationNameMatch"
          },
          "race": {
            "$ref": "#/components/schemas/Race"
          },
          "raceEstimate": {
            "$ref": "#/components/schemas/RaceEstimate"
          },
          "socialProfile": {
            "$ref": "#/components/schemas/SocialProfile"
          },
          "socialProfileExists": {
            "description": "Whether or not the requested social profile exists.",
            "type": "boolean"
          },
          "socialProfilePicture": {
            "$ref": "#/components/schemas/ImageAndDescription"
          }
        },
        "type": "object"
      },
      "AnalyzeThreadsSocialProfileRequest": {
        "properties": {
          "handle": {
            "description": "The user-readable screen name of the Threads account to analyze. Only one of `id` and `handle` should be given.",
            "maxLength": 80,
            "type": "string"
          },
          "id": {
            "description": "The numerical ID of the Threads account to analyze. Only one of `id` and `handle` should be given. If both `id` and `handle` are given, then `id` is used.",
            "maxLength": 80,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AnalyzeTikTokSocialProfileRequest": {
        "properties": {
          "handle": {
            "description": "The user-readable screen name of the TikTok account to analyze.",
            "maxLength": 80,
            "type": "string"
          }
        },
        "required": [
          "handle"
        ],
        "type": "object"
      },
      "AnalyzeTwitterSocialProfileRequest": {
        "properties": {
          "handle": {
            "description": "The user-readable screen name of the Twitter account to analyze. Only one of `id` and `handle` should be given.",
            "maxLength": 80,
            "type": "string"
          },
          "id": {
            "description": "The numerical ID of the Twitter account to analyze. Only one of `id` and `handle` should be given. If both `id` and `handle` are given, then `id` is used.",
            "maxLength": 80,
            "type": "string"
          }
        },
        "type": "object"
      },
      "BinaryImageAttributes": {
        "properties": {
          "bytes": {
            "description": "The image represented as base64-encoded binary data. The original image may not exceed 100KB in size.",
            "format": "byte",
            "maxLength": 715500,
            "type": "string"
          }
        },
        "required": [
          "bytes"
        ],
        "type": "object"
      },
      "CityLocation": {
        "description": "The city part of a location match.",
        "properties": {
          "coordinates": {
            "$ref": "#/components/schemas/Coordinates"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "id": {
            "description": "The ID of this city, which is an arbitrary value unrelated to the city itself.",
            "format": "City",
            "type": "string"
          },
          "names": {
            "description": "The name(s) of this location in various languages. If a host language (`hl`) was requested, the the first element in this array will be the name of the location in the given language, if it exists. This list of names is never empty.",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "minItems": 1,
            "type": "array"
          },
          "region": {
            "$ref": "#/components/schemas/State"
          },
          "state": {
            "$ref": "#/components/schemas/State"
          }
        },
        "required": [
          "country",
          "id",
          "names"
        ],
        "type": "object"
      },
      "Coordinates": {
        "description": "A latitude/longitude point in the WGS84 coordinating system.",
        "properties": {
          "latitude": {
            "format": "double",
            "maximum": 180,
            "minimum": -180,
            "type": "number"
          },
          "longitude": {
            "format": "double",
            "maximum": 180,
            "minimum": -180,
            "type": "number"
          }
        },
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object"
      },
      "Country": {
        "description": "An ISO 3166-1 alpha-2 country code.",
        "format": "country",
        "type": "string"
      },
      "CountryEstimate": {
        "additionalProperties": {
          "format": "float",
          "maximum": 1,
          "minimum": 0,
          "type": "number"
        },
        "description": "A discrete probability distribution modeling one person's likely country of origin. Keys are [ISO 3166-1 alpha-2 codes](https://en.wikipedia.org/wiki/ISO_3166-1), e.g., `US`.",
        "type": "object"
      },
      "CountryLocation": {
        "description": "The country part of a location match.",
        "properties": {
          "coordinates": {
            "$ref": "#/components/schemas/Coordinates"
          },
          "id": {
            "$ref": "#/components/schemas/Country"
          },
          "names": {
            "description": "The name(s) of this location in various languages. If a host language (`hl`) was requested, the the first element in this array will be the name of the location in the given language, if it exists. This list of names is never empty.",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "id",
          "names"
        ],
        "type": "object"
      },
      "DetectHumanFacesOutcome": {
        "description": "* `success` - The detection of faces in the image succeeded.\n* `failureImageTooBig` - The detection failed because the image was too large. Images may be up to 4096 x 4096 pixels in size.\n* `failureBadImage` - The detection failed because the image could not be understood.\n",
        "enum": [
          "success",
          "failureImageTooBig",
          "failureBadImage"
        ],
        "type": "string"
      },
      "DetectedHumanFace": {
        "description": "A region of an image containing a likely human face",
        "properties": {
          "region": {
            "$ref": "#/components/schemas/ImageRegion"
          }
        },
        "type": "object"
      },
      "DoubleBarreledHumanNamePartAttributes": {
        "description": "A [double-barreled](https://en.wikipedia.org/wiki/Double-barrelled_name), or hyphenated, name, e.g., \"Louis-Dreyfus\" in \"Julia Louis-Dreyfus.\" Both given names and family names may be double-barreled. The `firstPart` and `secondPart` properties both contain a `HumanNamePart` of type `single`.\n",
        "properties": {
          "firstPart": {
            "$ref": "#/components/schemas/DoubleBarreledHumanNameSubpart"
          },
          "secondPart": {
            "$ref": "#/components/schemas/DoubleBarreledHumanNameSubpart"
          }
        },
        "required": [
          "firstPart",
          "secondPart"
        ],
        "type": "object"
      },
      "DoubleBarreledHumanNameSubpart": {
        "description": "One part of a name match",
        "properties": {
          "matchedText": {
            "description": "The portion of text from the given input that was matched to this name",
            "maxLength": 80,
            "type": "string"
          },
          "singleBarreledHumanNamePartAttributes": {
            "$ref": "#/components/schemas/SingleBarreledHumanNamePartAttributes"
          },
          "type": {
            "$ref": "#/components/schemas/HumanNamePartType"
          }
        },
        "required": [
          "matchedText",
          "type"
        ],
        "type": "object"
      },
      "ErrorMessage": {
        "properties": {
          "detail": {
            "type": "string"
          },
          "instance": {
            "type": "string"
          },
          "status": {
            "format": "int32",
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "format": "url",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FacetedHumanNameInputAttributes": {
        "description": "A full human name represented as two facets: `givenName` and `familyName`. At least one of `givenName` and `familyName` must be given.\n",
        "properties": {
          "familyName": {
            "description": "The family part of the name",
            "maxLength": 80,
            "type": "string"
          },
          "givenName": {
            "description": "The given part of the name",
            "maxLength": 80,
            "type": "string"
          }
        },
        "type": "object"
      },
      "FacetedLocationNameInputAttributes": {
        "description": "A full location name represented as three facets: country, state, and city. Each facet is unstructured. At least one of country, state, and city must be given.\n",
        "properties": {
          "city": {
            "maxLength": 80,
            "type": "string"
          },
          "country": {
            "maxLength": 80,
            "type": "string"
          },
          "state": {
            "maxLength": 80,
            "type": "string"
          }
        },
        "type": "object"
      },
      "FreeHumanNamePartAttributes": {
        "description": "HumanGraphics uses a statistical name parser, so most name parts are backed by statistical evidence. However, names are not a \"closed\" system, so rare names, new names, and novel spellings of existing names all must be matched. Therefore, \"free\" name parts that \"look like\" part of a name can be accepted based on syntax as opposed to training.\n",
        "properties": {},
        "type": "object"
      },
      "Gender": {
        "description": "One person's [gender](https://en.wikipedia.org/wiki/Gender",
        "enum": [
          "male",
          "female"
        ],
        "type": "string"
      },
      "GenderEstimate": {
        "description": "A discrete probability distribution modeling one person's likely self-identified gender",
        "properties": {
          "female": {
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "male": {
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          }
        },
        "type": "object"
      },
      "HumanFaceAnalyzeRequest": {
        "description": "A request to the `analyzeHumanFace` endpoint",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/Image"
          },
          "region": {
            "$ref": "#/components/schemas/ImageRegion"
          }
        },
        "required": [
          "image"
        ],
        "type": "object"
      },
      "HumanFaceAnalyzeResponse": {
        "description": "A response to the `analyzeHumanFace` endpoint",
        "properties": {
          "age": {
            "$ref": "#/components/schemas/Age"
          },
          "ageEstimate": {
            "$ref": "#/components/schemas/AgeEstimate"
          },
          "confidence": {
            "description": "The likelihood that the analyzed region actually contains a face, as opposed to a different object that resembles a face.",
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "genderEstimate": {
            "$ref": "#/components/schemas/GenderEstimate"
          },
          "image": {
            "$ref": "#/components/schemas/ImageDescription"
          },
          "outcome": {
            "$ref": "#/components/schemas/AnalyzeHumanFaceOutcome"
          },
          "race": {
            "$ref": "#/components/schemas/Race"
          },
          "raceEstimate": {
            "$ref": "#/components/schemas/RaceEstimate"
          }
        },
        "type": "object"
      },
      "HumanFaceDetectRequest": {
        "description": "A request to the `detectHumanFaces` endpoint",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/Image"
          }
        },
        "required": [
          "image"
        ],
        "type": "object"
      },
      "HumanFaceDetectResponse": {
        "description": "A response from the `detectHumanFaces` endpoint.",
        "properties": {
          "detectedFaces": {
            "items": {
              "$ref": "#/components/schemas/DetectedHumanFace"
            },
            "type": "array"
          },
          "image": {
            "$ref": "#/components/schemas/ImageDescription"
          },
          "outcome": {
            "$ref": "#/components/schemas/DetectHumanFacesOutcome"
          }
        },
        "type": "object"
      },
      "HumanFaceInput": {
        "description": "A human face represented as an image with an optional region annotation indicating which portion of the image contains the face of interest. If the given image contains exactly one face, then the `region` is optional. Otherwise, if the image contains more than one face, then the `region` field is required in order for the face analysis to succeed. If given, this value should match a region returned from a previous call to the `detectHumanFaces` endpoint for the given image.\n",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/Image"
          },
          "region": {
            "$ref": "#/components/schemas/ImageRegion"
          }
        },
        "required": [
          "humanFaceImage"
        ],
        "type": "object"
      },
      "HumanNameAnalyzeBulkRequest": {
        "description": "A request to the `analyzeHumanNameBulk` endpoint.",
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/HumanNameAnalyzeBulkRequestItem"
            },
            "maxItems": 10,
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "HumanNameAnalyzeBulkRequestItem": {
        "description": "One request in a `HumanNameAnalyzeBulkRequest`.",
        "properties": {
          "id": {
            "description": "An identifier for this item within its bulk request. Must be unique among all items in the request.",
            "maxLength": 80,
            "minLength": 1,
            "type": "string"
          },
          "request": {
            "$ref": "#/components/schemas/HumanNameAnalyzeRequest"
          }
        },
        "required": [
          "id",
          "request"
        ],
        "type": "object"
      },
      "HumanNameAnalyzeBulkResponse": {
        "description": "A response from the `analyzeHumanNameBulk` endpoint.",
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/HumanNameAnalyzeBulkResponseItem"
            },
            "type": "array"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "HumanNameAnalyzeBulkResponseItem": {
        "description": "One response in a `HumanNameAnalyzeBulkResponse`.",
        "properties": {
          "id": {
            "description": "The id of the corresponding operation in the bulk request.",
            "maxLength": 80,
            "minLength": 1,
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/HumanNameAnalyzeResponse"
          }
        },
        "required": [
          "id",
          "response"
        ],
        "type": "object"
      },
      "HumanNameAnalyzeRequest": {
        "description": "A request to the `analyzeHumanName` endpoint",
        "properties": {
          "countryHint": {
            "$ref": "#/components/schemas/Country"
          },
          "familyName": {
            "description": "The family name to analyze",
            "maxLength": 80,
            "type": "string"
          },
          "givenName": {
            "description": "The given name to analyze",
            "maxLength": 80,
            "type": "string"
          }
        },
        "required": [
          "familyName",
          "givenName"
        ],
        "type": "object"
      },
      "HumanNameAnalyzeResponse": {
        "description": "A response to the `analyzeHumanName` endpoint",
        "properties": {
          "age": {
            "$ref": "#/components/schemas/Age"
          },
          "ageEstimate": {
            "$ref": "#/components/schemas/AgeEstimate"
          },
          "confidence": {
            "description": "The likelihood that all matched parts are correct",
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "countryEstimate": {
            "$ref": "#/components/schemas/CountryEstimate"
          },
          "familyNameConfidence": {
            "description": "The likelihood that the family name match is the correct parse among all valid, successful parses for this family name",
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "familyNameMatch": {
            "$ref": "#/components/schemas/HumanNamePart"
          },
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "genderEstimate": {
            "$ref": "#/components/schemas/GenderEstimate"
          },
          "givenNameConfidence": {
            "description": "The likelihood that the given name match is the correct parse among all valid, successful parses for this given name",
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "givenNameMatch": {
            "$ref": "#/components/schemas/HumanNamePart"
          },
          "match": {
            "$ref": "#/components/schemas/HumanNameMatch"
          },
          "race": {
            "$ref": "#/components/schemas/Race"
          },
          "raceEstimate": {
            "$ref": "#/components/schemas/RaceEstimate"
          }
        },
        "type": "object"
      },
      "HumanNameInput": {
        "description": "A human name input",
        "properties": {
          "countryHint": {
            "$ref": "#/components/schemas/Country"
          },
          "facetedHumanNameInputAttributes": {
            "$ref": "#/components/schemas/FacetedHumanNameInputAttributes"
          },
          "textHumanNameInputAttributes": {
            "$ref": "#/components/schemas/TextHumanNameInputAttributes"
          },
          "type": {
            "$ref": "#/components/schemas/HumanNameInputType"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "HumanNameInputType": {
        "description": "* `text` - A full, unparsed name, e.g., \"Fox Mulder\"\n* `faceted` - A two-part human name represented as two facets, given name and family name, e.g., given name: \"Fox\", family name: \"Mulder\"\n",
        "enum": [
          "text",
          "faceted"
        ],
        "type": "string"
      },
      "HumanNameMatch": {
        "description": "A match of one human name",
        "properties": {
          "familyName": {
            "$ref": "#/components/schemas/HumanNamePart"
          },
          "givenName": {
            "$ref": "#/components/schemas/HumanNamePart"
          },
          "middleName": {
            "$ref": "#/components/schemas/HumanNamePart"
          },
          "nickName": {
            "$ref": "#/components/schemas/HumanNamePart"
          },
          "secondFamilyName": {
            "$ref": "#/components/schemas/HumanNamePart"
          },
          "secondMiddleName": {
            "$ref": "#/components/schemas/HumanNamePart"
          },
          "template": {
            "$ref": "#/components/schemas/HumanNameTemplatePreview"
          }
        },
        "type": "object"
      },
      "HumanNameMultiparseBulkRequest": {
        "description": "A request to the `multiparseHumanNamesBulk` endpoint.",
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/HumanNameMultiparseBulkRequestItem"
            },
            "maxItems": 10,
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "HumanNameMultiparseBulkRequestItem": {
        "description": "One request in a `HumanNameMultiparseBulkRequest`.",
        "properties": {
          "id": {
            "description": "An identifier for this item within its bulk request. Must be unique among all items in the request.",
            "maxLength": 80,
            "minLength": 1,
            "type": "string"
          },
          "request": {
            "$ref": "#/components/schemas/HumanNameMultiparseRequest"
          }
        },
        "required": [
          "id",
          "request"
        ],
        "type": "object"
      },
      "HumanNameMultiparseBulkResponse": {
        "description": "A response from the `multiparseHumanNamesBulk` endpoint.",
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/HumanNameMultiparseBulkResponseItem"
            },
            "type": "array"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "HumanNameMultiparseBulkResponseItem": {
        "description": "One response in a `HumanNameMultiparseBulkResponse`.",
        "properties": {
          "id": {
            "description": "The id of the corresponding operation in the bulk request.",
            "maxLength": 80,
            "minLength": 1,
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/HumanNameMultiparseResponse"
          }
        },
        "required": [
          "id",
          "response"
        ],
        "type": "object"
      },
      "HumanNameMultiparseNameMatch": {
        "description": "A single name match in a multiparse response",
        "properties": {
          "age": {
            "$ref": "#/components/schemas/Age"
          },
          "ageEstimate": {
            "$ref": "#/components/schemas/AgeEstimate"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "countryEstimate": {
            "$ref": "#/components/schemas/CountryEstimate"
          },
          "familyName": {
            "$ref": "#/components/schemas/HumanNamePart"
          },
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "genderEstimate": {
            "$ref": "#/components/schemas/GenderEstimate"
          },
          "givenName": {
            "$ref": "#/components/schemas/HumanNamePart"
          },
          "middleName": {
            "$ref": "#/components/schemas/HumanNamePart"
          },
          "nickName": {
            "$ref": "#/components/schemas/HumanNamePart"
          },
          "race": {
            "$ref": "#/components/schemas/Race"
          },
          "raceEstimate": {
            "$ref": "#/components/schemas/RaceEstimate"
          },
          "secondFamilyName": {
            "$ref": "#/components/schemas/HumanNamePart"
          },
          "secondMiddleName": {
            "$ref": "#/components/schemas/HumanNamePart"
          },
          "template": {
            "$ref": "#/components/schemas/HumanNameTemplatePreview"
          }
        },
        "type": "object"
      },
      "HumanNameMultiparseRequest": {
        "description": "A request to the `multiparseHumanNames` endpoint.",
        "properties": {
          "countryHint": {
            "$ref": "#/components/schemas/Country"
          },
          "text": {
            "description": "The human name(s) to parse",
            "maxLength": 240,
            "type": "string"
          }
        },
        "required": [
          "text"
        ],
        "type": "object"
      },
      "HumanNameMultiparseResponse": {
        "description": "A response from the `multiparseHumanNames` endpoint.",
        "properties": {
          "confidence": {
            "description": "The likelihood that the matches are the correct parse among all valid, successful parses for these names",
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "names": {
            "items": {
              "$ref": "#/components/schemas/HumanNameMultiparseNameMatch"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "HumanNameParseBulkRequest": {
        "description": "A request to the `parseHumanNameBulk` endpoint.",
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/HumanNameParseBulkRequestItem"
            },
            "maxItems": 10,
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "HumanNameParseBulkRequestItem": {
        "description": "One request in a `HumanNameParseBulkRequest`.",
        "properties": {
          "id": {
            "description": "An identifier for this item within its bulk request. Must be unique among all items in the request.",
            "maxLength": 80,
            "minLength": 1,
            "type": "string"
          },
          "request": {
            "$ref": "#/components/schemas/HumanNameParseRequest"
          }
        },
        "required": [
          "id",
          "request"
        ],
        "type": "object"
      },
      "HumanNameParseBulkResponse": {
        "description": "A response from the `parseHumanNameBulk` endpoint.",
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/HumanNameParseBulkResponseItem"
            },
            "type": "array"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "HumanNameParseBulkResponseItem": {
        "description": "One response in a `HumanNameParseBulkResponse`.",
        "properties": {
          "id": {
            "description": "The id of the corresponding operation in the bulk request.",
            "maxLength": 80,
            "minLength": 1,
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/HumanNameParseResponse"
          }
        },
        "required": [
          "id",
          "response"
        ],
        "type": "object"
      },
      "HumanNameParseRequest": {
        "description": "A request to the `parseHumanName` endpoint.",
        "properties": {
          "countryHint": {
            "$ref": "#/components/schemas/Country"
          },
          "text": {
            "description": "The human name to parse",
            "maxLength": 240,
            "type": "string"
          }
        },
        "required": [
          "text"
        ],
        "type": "object"
      },
      "HumanNameParseResponse": {
        "description": "A response from the `parseHumanName` endpoint.",
        "properties": {
          "age": {
            "$ref": "#/components/schemas/Age"
          },
          "ageEstimate": {
            "$ref": "#/components/schemas/AgeEstimate"
          },
          "confidence": {
            "description": "The likelihood that the match is the correct parse among all valid, successful parses for this name",
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "countryEstimate": {
            "$ref": "#/components/schemas/CountryEstimate"
          },
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "genderEstimate": {
            "$ref": "#/components/schemas/GenderEstimate"
          },
          "match": {
            "$ref": "#/components/schemas/HumanNameMatch"
          },
          "race": {
            "$ref": "#/components/schemas/Race"
          },
          "raceEstimate": {
            "$ref": "#/components/schemas/RaceEstimate"
          }
        },
        "type": "object"
      },
      "HumanNamePart": {
        "description": "One part of a name match",
        "properties": {
          "doubleBarreledHumanNamePartAttributes": {
            "$ref": "#/components/schemas/DoubleBarreledHumanNamePartAttributes"
          },
          "freeHumanNamePartAttributes": {
            "$ref": "#/components/schemas/FreeHumanNamePartAttributes"
          },
          "initialHumanNamePartAttributes": {
            "$ref": "#/components/schemas/InitialHumanNamePartAttributes"
          },
          "matchedText": {
            "description": "The portion of text from the given input that was matched to this name",
            "maxLength": 80,
            "type": "string"
          },
          "nicknameHumanNamePartAttributes": {
            "$ref": "#/components/schemas/NicknameHumanNamePartAttributes"
          },
          "singleBarreledHumanNamePartAttributes": {
            "$ref": "#/components/schemas/SingleBarreledHumanNamePartAttributes"
          },
          "type": {
            "$ref": "#/components/schemas/HumanNamePartType"
          }
        },
        "required": [
          "matchedText",
          "type"
        ],
        "type": "object"
      },
      "HumanNamePartType": {
        "description": "* `initial` - A single-letter abbreviation of a name, e.g., \"J.\" in \"J. Edgar Hoover.\" All of given, middle, and family names can be initials.\n* `single` - A single-barreled, or non-hyphenated, name, e.g., \"Hoover\" in \"J. Edgar Hoover.\" Most name parts are of this type.\n* `double` - A [double-barreled](https://en.wikipedia.org/wiki/Double-barrelled_name), or hyphenated, name, e.g., \"Louis-Dreyfus\" in \"Julia Louis-Dreyfus.\" Both given names and family names may be double-barreled.\n* `free` - HumanGraphics uses a statistical name parser, so most name parts are backed by statistical evidence. However, names are not a \"closed\" system, so rare names, new names, and novel spellings of existing names all must be matched. Therefore, \"free\" name parts that \"look like\" part of a name can be accepted based on syntax as opposed to training.\n* `nick` - A sobriquet enclosed in quote marks (i.e., 'single quotes', \"double quotes\", «guillemets», etc.), e.g., \"Maverick\" in \"Pete 'Maverick' Mitchell.\"\n",
        "enum": [
          "initial",
          "single",
          "double",
          "free",
          "nick"
        ],
        "type": "string"
      },
      "HumanNameTemplatePreview": {
        "description": "The name syntax that was matched during this parse",
        "properties": {
          "text": {
            "maxLength": 240,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Image": {
        "description": "An image of type PNG or JPG. The image may up to 4096 x 4096 pixels in size.",
        "properties": {
          "binaryImageAttributes": {
            "$ref": "#/components/schemas/BinaryImageAttributes"
          },
          "type": {
            "$ref": "#/components/schemas/ImageType"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "ImageAndDescription": {
        "properties": {
          "description": {
            "$ref": "#/components/schemas/ImageDescription"
          },
          "image": {
            "$ref": "#/components/schemas/Image"
          }
        },
        "type": "object"
      },
      "ImageDescription": {
        "properties": {
          "format": {
            "$ref": "#/components/schemas/ImageFormat"
          },
          "height": {
            "description": "The detected height of the given image, in pixels",
            "format": "int32",
            "type": "integer"
          },
          "length": {
            "description": "The number of bytes in the serialized image",
            "format": "int64",
            "type": "integer"
          },
          "width": {
            "description": "The detected width of the given image, in pixels",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ImageFormat": {
        "enum": [
          "jpeg",
          "png"
        ],
        "type": "string"
      },
      "ImageRegion": {
        "description": "A region of an image described as a rectangle aligned with the x and y axes. The coordinate system starts at the top-left corner, with x increasing in the left-to-right direction and y increasing in the top-to-bottom direction.",
        "properties": {
          "height": {
            "description": "The height of the rectangle, from top to bottom. The bottommost boundary of this rectangle is `y + height`, exclusive.",
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          },
          "width": {
            "description": "The width of the rectangle, from left to right. The rightmost boundary of this rectangle is `x + width`, exclusive.",
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          },
          "x": {
            "description": "The leftmost boundary of this rectangle, inclusive.",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "y": {
            "description": "The topmost boundary of this rectangle, inclusive.",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "height",
          "width",
          "x",
          "y"
        ],
        "type": "object"
      },
      "ImageType": {
        "description": "* `binary` - An image provided as base64-encoded binary data in the request\n",
        "enum": [
          "binary"
        ],
        "type": "string"
      },
      "InitialHumanNamePartAttributes": {
        "description": "A single-letter abbreviation of a name, e.g., \"J.\" in \"J. Edgar Hoover.\" All of given, middle, and family names can be initials.\n",
        "properties": {},
        "type": "object"
      },
      "LocalizedText": {
        "description": "Localized text in the given language.",
        "properties": {
          "language": {
            "description": "The language of the text, currently expressed as an [ISO 639-1 code](https://en.wikipedia.org/wiki/ISO_639-1). Additional language codes may be used in the future.",
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "LocationNameAnalyzeBulkRequest": {
        "description": "A request to the `analyzeLocationNameBulk` endpoint.",
        "properties": {
          "items": {
            "description": "The individual operations to perform",
            "items": {
              "$ref": "#/components/schemas/LocationNameAnalyzeBulkRequestItem"
            },
            "maxItems": 10,
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "LocationNameAnalyzeBulkRequestItem": {
        "description": "One request in a `LocationNameAnalyzeBulkRequest`",
        "properties": {
          "id": {
            "description": "An identifier for this item within its bulk request. Must be unique among all items in the request.",
            "maxLength": 80,
            "minLength": 1,
            "type": "string"
          },
          "request": {
            "$ref": "#/components/schemas/LocationNameAnalyzeRequest"
          }
        },
        "required": [
          "id",
          "request"
        ],
        "type": "object"
      },
      "LocationNameAnalyzeBulkResponse": {
        "description": "A response from the `resolveLocationNameBulk` endpoint.",
        "properties": {
          "items": {
            "description": "The individual operations performed. If the overall operation succeeded, then every operation in the request will have an item in the corresponding response, even if the response is an error.",
            "items": {
              "$ref": "#/components/schemas/LocationNameAnalyzeBulkResponseItem"
            },
            "maxItems": 10,
            "minItems": 0,
            "type": "array"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "LocationNameAnalyzeBulkResponseItem": {
        "description": "One response in a `LocationNameAnalyzeBulkResponse`",
        "properties": {
          "id": {
            "description": "The id of the corresponding operation in the bulk request.",
            "maxLength": 80,
            "minLength": 1,
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/LocationNameAnalyzeResponse"
          }
        },
        "required": [
          "id",
          "response"
        ],
        "type": "object"
      },
      "LocationNameAnalyzeRequest": {
        "description": "A request to the `analyzeLocationName` endpoint.",
        "properties": {
          "city": {
            "description": "The text that describes the city",
            "maxLength": 80,
            "type": "string"
          },
          "country": {
            "description": "The text that describes the country",
            "maxLength": 80,
            "type": "string"
          },
          "hl": {
            "description": "The primary language in which to return location labels. The language should be provided as an [ISO 639-1 code](https://en.wikipedia.org/wiki/ISO_639-1). If provided, then the first name of each location will be in the given language, if such a name exists. Names in other languages may also be included in the response. Unrecognized languages are ignored.",
            "maxLength": 2,
            "type": "string"
          },
          "state": {
            "description": "The text that describes the state",
            "maxLength": 80,
            "type": "string"
          }
        },
        "type": "object"
      },
      "LocationNameAnalyzeResponse": {
        "description": "A response from the `analyzeLocationName` endpoint.",
        "properties": {
          "cityConfidence": {
            "description": "The likelihood that the match is correctly resolved among all valid, successful parses for this location",
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "cityMatch": {
            "$ref": "#/components/schemas/LocationNameMatch"
          },
          "confidence": {
            "description": "The likelihood that the match is correctly resolved among all valid, successful parses for this location",
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "countryConfidence": {
            "description": "The likelihood that the match is correctly resolved among all valid, successful parses for this location",
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "countryEstimate": {
            "$ref": "#/components/schemas/CountryEstimate"
          },
          "countryMatch": {
            "$ref": "#/components/schemas/LocationNameMatch"
          },
          "match": {
            "$ref": "#/components/schemas/LocationNameMatch"
          },
          "stateConfidence": {
            "description": "The likelihood that the match is correctly resolved among all valid, successful parses for this location",
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "stateMatch": {
            "$ref": "#/components/schemas/LocationNameMatch"
          }
        },
        "type": "object"
      },
      "LocationNameInput": {
        "description": "A location name input",
        "properties": {
          "facetedLocationNameInputAttributes": {
            "$ref": "#/components/schemas/FacetedLocationNameInputAttributes"
          },
          "textLocationNameInputAttributes": {
            "$ref": "#/components/schemas/TextLocationNameInputAttributes"
          },
          "type": {
            "$ref": "#/components/schemas/LocationNameInputType"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "LocationNameInputType": {
        "description": "* `text` - A full, unparsed location name, e.g., \"Alexandria, VA\"\n* `faceted` - A parsed name represented by up to 3 facets, country name, state name, and city name, e.g., state name: \"VA\", city name: \"Alexandria\"\n",
        "enum": [
          "text",
          "faceted"
        ],
        "type": "string"
      },
      "LocationNameMatch": {
        "description": "A location match from resolving a location name.",
        "properties": {
          "city": {
            "$ref": "#/components/schemas/CityLocation"
          },
          "country": {
            "$ref": "#/components/schemas/CountryLocation"
          },
          "matchedText": {
            "description": "The portion of text from the given input that was matched to this location",
            "maxLength": 240,
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/StateLocation"
          },
          "template": {
            "$ref": "#/components/schemas/LocationNameTemplatePreview"
          },
          "type": {
            "$ref": "#/components/schemas/LocationType"
          }
        },
        "required": [
          "country",
          "type"
        ],
        "type": "object"
      },
      "LocationNameResolveBulkRequest": {
        "description": "A request to the `resolveLocationNameBulk` endpoint.",
        "properties": {
          "items": {
            "description": "The individual operations to perform",
            "items": {
              "$ref": "#/components/schemas/LocationNameResolveBulkRequestItem"
            },
            "maxItems": 10,
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "LocationNameResolveBulkRequestItem": {
        "description": "One request in a `LocationNameResolveBulkRequest`",
        "properties": {
          "id": {
            "description": "An identifier for this item within its bulk request. Must be unique among all items in the request.",
            "maxLength": 80,
            "minLength": 1,
            "type": "string"
          },
          "request": {
            "$ref": "#/components/schemas/LocationNameResolveRequest"
          }
        },
        "required": [
          "id",
          "request"
        ],
        "type": "object"
      },
      "LocationNameResolveBulkResponse": {
        "description": "A response from the `resolveLocationNameBulk` endpoint.",
        "properties": {
          "items": {
            "description": "The individual operations performed. If the overall operation succeeded, then every operation in the request will have an item in the corresponding response, even if the response is an error.",
            "items": {
              "$ref": "#/components/schemas/LocationNameResolveBulkResponseItem"
            },
            "maxItems": 10,
            "minItems": 0,
            "type": "array"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "LocationNameResolveBulkResponseItem": {
        "description": "One response in a `LocationNameResolveBulkResponse`",
        "properties": {
          "id": {
            "description": "The id of the corresponding operation in the bulk request.",
            "maxLength": 80,
            "minLength": 1,
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/LocationNameResolveResponse"
          }
        },
        "required": [
          "id",
          "response"
        ],
        "type": "object"
      },
      "LocationNameResolveRequest": {
        "description": "A request to the `resolveLocationName` endpoint.",
        "properties": {
          "hl": {
            "description": "The primary language in which to return location labels. The language should be provided as an [ISO 639-1 code](https://en.wikipedia.org/wiki/ISO_639-1). If provided, then the first name of each location will be in the given language, if such a name exists. Names in other languages may also be included in the response. Unrecognized languages are ignored.",
            "maxLength": 2,
            "type": "string"
          },
          "text": {
            "description": "The location string to resolve",
            "maxLength": 240,
            "type": "string"
          }
        },
        "required": [
          "text"
        ],
        "type": "object"
      },
      "LocationNameResolveResponse": {
        "description": "A response from the `resolveLocationName` endpoint.",
        "properties": {
          "confidence": {
            "description": "The likelihood that the match is correctly resolved among all valid, successful parses for this location",
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "countryEstimate": {
            "$ref": "#/components/schemas/CountryEstimate"
          },
          "match": {
            "$ref": "#/components/schemas/LocationNameMatch"
          }
        },
        "type": "object"
      },
      "LocationNameTemplatePreview": {
        "description": "The name syntax that was matched during this resolution",
        "properties": {
          "text": {
            "maxLength": 240,
            "type": "string"
          }
        },
        "type": "object"
      },
      "LocationType": {
        "description": "* `country` - A location with an ISO-3166-1 code\n* `state` - A location with an ISO 3166-2 code\n* `city` - A human settlement with no ISO 3166 code\n",
        "enum": [
          "country",
          "state",
          "city"
        ],
        "type": "string"
      },
      "NicknameHumanNamePartAttributes": {
        "description": "A sobriquet enclosed in quote marks (i.e., 'single quotes', \"double quotes\", «guillemets», etc.), e.g., \"Maverick\" in \"Pete 'Maverick' Mitchell.\"\n",
        "properties": {},
        "type": "object"
      },
      "Race": {
        "description": "One person's [race](https://en.wikipedia.org/wiki/Race_%28human_categorization%29). These values follow [the labels and definitions laid out in the 2010 US Census](https://www.census.gov/content/dam/Census/library/publications/2011/dec/c2010br-02.pdf), and can be interpreted as:\n\n* `white` - Non-Hispanic White Alone\n* `black` - Non-Hispanic Black or African American Alone,\n* `asianPacificIslander` - Non-Hispanic American Indian and Alaska Native Alone\n* `americanIndian` - Non-Hispanic Asian and Native Hawaiian and Other Pacific Islander Alone\n* `twoPlusRaces` - Non-Hispanic Two or More Races\n* `hispanic` - Hispanic or Latino origin\n",
        "enum": [
          "white",
          "black",
          "asianPacificIslander",
          "americanIndian",
          "twoPlusRaces",
          "hispanic"
        ],
        "type": "string"
      },
      "RaceEstimate": {
        "description": "A discrete probability distribution modeling one person's likely race",
        "properties": {
          "americanIndian": {
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "asianPacificIslander": {
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "black": {
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "hispanic": {
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "twoPlusRaces": {
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "white": {
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          }
        },
        "type": "object"
      },
      "SingleBarreledHumanNamePartAttributes": {
        "description": "A single-barreled, or non-hyphenated, name, e.g., \"Hoover\" in \"J. Edgar Hoover.\" Most name parts are of this type.\n",
        "properties": {},
        "type": "object"
      },
      "SocialNetwork": {
        "enum": [
          "instagram",
          "threads",
          "tiktok",
          "twitter"
        ],
        "type": "string"
      },
      "SocialProfile": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SocialProfilePreview"
          },
          {
            "properties": {
              "activeAt": {
                "format": "date-time",
                "type": "string"
              },
              "biography": {
                "maxLength": 160,
                "type": "string"
              },
              "createdAt": {
                "format": "date-time",
                "type": "string"
              },
              "followers": {
                "format": "int64",
                "type": "integer"
              },
              "following": {
                "format": "int64",
                "type": "integer"
              },
              "homepage": {
                "format": "url",
                "type": "string"
              },
              "likes": {
                "format": "int64",
                "type": "integer"
              },
              "location": {
                "maxLength": 80,
                "type": "string"
              },
              "name": {
                "maxLength": 80,
                "type": "string"
              },
              "picture": {
                "format": "url",
                "type": "string"
              },
              "posts": {
                "format": "int64",
                "type": "integer"
              },
              "verified": {
                "type": "boolean"
              },
              "visibility": {
                "$ref": "#/components/schemas/SocialProfileVisibility"
              }
            },
            "type": "object"
          }
        ]
      },
      "SocialProfilePreview": {
        "properties": {
          "handle": {
            "maxLength": 80,
            "type": "string"
          },
          "id": {
            "maxLength": 80,
            "type": "string"
          },
          "network": {
            "$ref": "#/components/schemas/SocialNetwork"
          }
        },
        "type": "object"
      },
      "SocialProfileVisibility": {
        "description": "One social profile's access level, which can take the following values:\n\n* `public` - The account is public and fully accessible to all users\n* `private` - The account is private and accessible only to a limited group\n* `protected` - The account is public but only partially accessible to all users\n",
        "enum": [
          "public",
          "private",
          "protected"
        ],
        "type": "string"
      },
      "State": {
        "description": "An ISO 3166-2 country subdivision code",
        "format": "state",
        "type": "string"
      },
      "StateLocation": {
        "description": "The state part of a location match.",
        "properties": {
          "coordinates": {
            "$ref": "#/components/schemas/Coordinates"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "id": {
            "$ref": "#/components/schemas/State"
          },
          "names": {
            "description": "The name(s) of this location in various languages. If a host language (`hl`) was requested, the the first element in this array will be the name of the location in the given language, if it exists. This list of names is never empty.",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "minItems": 1,
            "type": "array"
          },
          "region": {
            "$ref": "#/components/schemas/Country"
          }
        },
        "required": [
          "country",
          "id",
          "names"
        ],
        "type": "object"
      },
      "TextHumanNameInputAttributes": {
        "description": "A full, unparsed name",
        "properties": {
          "text": {
            "description": "The full, unparsed name",
            "maxLength": 80,
            "type": "string"
          }
        },
        "required": [
          "text"
        ],
        "type": "object"
      },
      "TextLocationNameInputAttributes": {
        "description": "A full, unparsed location name",
        "properties": {
          "text": {
            "maxLength": 80,
            "type": "string"
          }
        },
        "required": [
          "text"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "description": "[HumanGraphics](https://www.humangraphics.io) is a family of products designed to create structured data from unstructured human characteristics and behavior.\n\n# Endpoints\n\nThe API currently provides the following high-level operations:\n\n## Name Parsing and Analysis\n\nThe endpoints with the Names tag take unstructured human names and parse them into a structured representation of the name. In addition, for each parsed name, the endpoints also provide demographic estimates about the named person's country of origin and gender (for all geographies); plus age and race (for some geographies only).\n\n## Location Resolution and Analysis\n\nThe endpoints with the Locations tag take unstructured location names and resolve them into a structured representation of the location. Location resolution provides only city-level granularity at this time, so it is not suitable for the geocoding of addresses.\n\n## Face Analysis\n\nThe endpoints with the Faces tag take image data and recognize and/or analyze human face(s) in the given image. Facial analysis returns structured estimates of the age, gender, and race of the person.\n\n## Combined Analysis\n\nVarious endpoints allow users to provide multiple data points about a person, for example their name and face, to create a more detailed ensemble estimate of the person's demographic profile that is richer and more accurate than analysis from one data point alone.\n\n## Social Media Profile Analysis\n\nThe endpoints with the Social Profile tag take social media profile account identifiers, for example a user ID or a handle, and return a full panel of demographic estimates for the profile, if it exists, by analyzing its name, location, and profile picture.\n\n## Beta\n\nThe endpoints with the Beta tag are in a \"beta\" testing period. These endpoints are of production quality, but their features, functionality, and performance may change in non-backwards compatible ways without notice.\n\n# Usage Tracking\n\nThe HumanGraphics API usage is tracked in \"credits,\" which are purchased on a subscription basis. Each endpoint's cost in credits is captured in its respective documentation. Non-2XX responses count against rate limits, but are billed at zero credits. Note that 2XX responses can still return no data (e.g., name match failure) and are still billed as documented. Bulk endpoints count as one call for rate limiting purposes, but multiple credits depending on request size.\n",
    "title": "HumanGraphics API",
    "version": "1.5.3.1"
  },
  "openapi": "3.0.1",
  "paths": {
    "/v1/humans/analyze": {
      "post": {
        "description": "Analyze a person, as described by their name, location, and/or a picture containing only their face. Any combination of the above inputs may be given, except none. Estimates for their age, gender, race, and country are combined to produce one estimate based on all these data.\n\nCost: The sum of the below for inputs included.\n\n* Name: 1 credit\n* Location: 1 credit\n* Face: 3 credits\n\nSo, a call that includes all 3 inputs costs 5 credits.",
        "operationId": "analyzeHuman",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalyzeHumanRequest"
              }
            }
          },
          "description": "A request to the `analyzeHuman` endpoint. At least one of `locationNameText`, `locationName`, `humanNameText`, `humanName`, `humanFaceImage`, and `humanFace` must be given.\n\nThe `locationNameText` property is **deprecated**. Use the `locationName` property instead. If both `locationNameText` and `locationName` are given, then `locationNameText` is ignored.\n\nThe `humanNameText` property is **deprecated**. Use the `humanName` property instead. If both `humanNameText` and `humanName` are given, then `humanNameText` is ignored.\n\nThe `humanFaceImage` and `humanFaceRegion` properties are **deprecated**. Use the `humanFace` property instead. If both `humanFace` and `humanFaceImage` are given, then `humanFaceImage` and `humanFaceRegion` are both ignored.\n",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyzeHumanResponse"
                }
              }
            },
            "description": "200 response",
            "headers": {
              "X-API-Credits": {
                "$ref": "#/components/headers/X-API-Credits"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest400"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized401"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden403"
          },
          "413": {
            "$ref": "#/components/responses/ContentTooLarge413"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType415"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity422"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests429"
          }
        },
        "summary": "Analyze a person's name, location, and face together (1-5 credits)",
        "tags": [
          "Humans",
          "Faces",
          "Names",
          "Locations"
        ]
      }
    },
    "/v1/humans/faces/analyze": {
      "post": {
        "description": "Analyze one human face in the given image.\n\nIf a region is given, then it must match a region returned previously by the `detectHumanFaces` endpoint exactly, and the face in that region is analyzed. Otherwise, the image is assumed to contain exactly one face, and that face is analyzed. If the photograph does not actually have exactly one face, then analysis fails with an appropriate error code.\n\nCost: 3 credits, regardless of whether the face analysis succeeds or not.",
        "operationId": "analyzeHumanFace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HumanFaceAnalyzeRequest"
              }
            }
          },
          "description": "A request to the `analyzeHumanFace` endpoint",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanFaceAnalyzeResponse"
                }
              }
            },
            "description": "200 response",
            "headers": {
              "X-API-Credits": {
                "$ref": "#/components/headers/X-API-Credits"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest400"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized401"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden403"
          },
          "413": {
            "$ref": "#/components/responses/ContentTooLarge413"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType415"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity422"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests429"
          }
        },
        "summary": "Analyze one face for age, gender, and race (3 credits)",
        "tags": [
          "Humans",
          "Faces"
        ]
      }
    },
    "/v1/humans/faces/detect": {
      "post": {
        "description": "Detect up to 100 faces in an image.\n\nIn general, faces down to 40 pixels on a side are detected successfully. Smaller faces and faces oriented at an extreme angle to the camera or to the vertical may not be detected.\n\nCost: 1 credit, regardless of the number of faces detected.",
        "operationId": "detectHumanFaces",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HumanFaceDetectRequest"
              }
            }
          },
          "description": "A request to the `detectHumanFaces` endpoint",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanFaceDetectResponse"
                }
              }
            },
            "description": "200 response",
            "headers": {
              "X-API-Credits": {
                "$ref": "#/components/headers/X-API-Credits"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest400"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized401"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden403"
          },
          "413": {
            "$ref": "#/components/responses/ContentTooLarge413"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType415"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity422"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests429"
          }
        },
        "summary": "Detect faces in an image (1 credit)",
        "tags": [
          "Humans",
          "Faces"
        ]
      }
    },
    "/v1/humans/names/analyze": {
      "post": {
        "description": "Analyze a human name provided in parts, i.e., given name and family name.\n\nCost: 1 credit, regardless of whether or not the analysis succeeds.",
        "operationId": "analyzeHumanName",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HumanNameAnalyzeRequest"
              }
            }
          },
          "description": "A request to the `analyzeHumanName` endpoint",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanNameAnalyzeResponse"
                }
              }
            },
            "description": "200 response",
            "headers": {
              "X-API-Credits": {
                "$ref": "#/components/headers/X-API-Credits"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest400"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized401"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden403"
          },
          "413": {
            "$ref": "#/components/responses/ContentTooLarge413"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType415"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity422"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests429"
          }
        },
        "summary": "Analyze a human name from parts (1 credit)",
        "tags": [
          "Humans",
          "Names"
        ]
      }
    },
    "/v1/humans/names/analyze/bulk": {
      "post": {
        "description": "Analyze a list of up to 10 human names in one operation.\n\nBulk operations are intended to increase throughput, not reduce cost.\n\nCost: 1 credit per input, whether each analysis is successful or not.",
        "operationId": "analyzeHumanNameBulk",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HumanNameAnalyzeBulkRequest"
              }
            }
          },
          "description": "A request to the `analyzeHumanNameBulk` endpoint.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanNameAnalyzeBulkResponse"
                }
              }
            },
            "description": "200 response",
            "headers": {
              "X-API-Credits": {
                "$ref": "#/components/headers/X-API-Credits"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest400"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized401"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden403"
          },
          "413": {
            "$ref": "#/components/responses/ContentTooLarge413"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType415"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity422"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests429"
          }
        },
        "summary": "Analyze a human name from parts, in bulk (1-10 credits)",
        "tags": [
          "Humans",
          "Names"
        ]
      }
    },
    "/v1/humans/names/multiparse": {
      "post": {
        "description": "Parse one or more human names from the given string.\n\nThis is intended for byline-style text (i.e., lists of names, \"Fox Mulder, Dana Scully\") as opposed to plain text (i.e., named entity recognition).\n\nCost: 1 credit, regardless of whether or not the parse succeeds and the number of names returned.\n",
        "operationId": "multiparseHumanNames",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HumanNameMultiparseRequest"
              }
            }
          },
          "description": "A request to the `multiparseHumanNames` endpoint.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanNameMultiparseResponse"
                }
              }
            },
            "description": "200 response",
            "headers": {
              "X-API-Credits": {
                "$ref": "#/components/headers/X-API-Credits"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest400"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized401"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden403"
          },
          "413": {
            "$ref": "#/components/responses/ContentTooLarge413"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType415"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity422"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests429"
          }
        },
        "summary": "Parse one or more human names from a string (1 credit)",
        "tags": [
          "Humans",
          "Names"
        ]
      }
    },
    "/v1/humans/names/multiparse/bulk": {
      "post": {
        "description": "Multiparse a list of up to 10 human names in one operation.\n\nBulk operations are intended to increase throughput, not reduce cost.\n\nCost: 1 credit per string, regardless of whether or not the match succeeds and the number of names returned.\n",
        "operationId": "multiparseHumanNamesBulk",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HumanNameMultiparseBulkRequest"
              }
            }
          },
          "description": "A request to the `multiparseHumanNamesBulk` endpoint.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanNameMultiparseBulkResponse"
                }
              }
            },
            "description": "200 response",
            "headers": {
              "X-API-Credits": {
                "$ref": "#/components/headers/X-API-Credits"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest400"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized401"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden403"
          },
          "413": {
            "$ref": "#/components/responses/ContentTooLarge413"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType415"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity422"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests429"
          }
        },
        "summary": "Parse one or more human names from a string, in bulk (1-10 credits)",
        "tags": [
          "Humans",
          "Names"
        ]
      }
    },
    "/v1/humans/names/parse": {
      "post": {
        "description": "Parses a human name string (e.g., \"George Washington\") into its most likely parts (e.g., forename \"George\", surname \"Washington\"), with demographic estimates (i.e., age, sex, race, and country of origin). A name has at most six components:\n\n1. **Given Name** - In most cultures, a person's given name is a name given to them at birth by parents. Given names are also called first names, forenames, and Christian names. In \"John Ronald Reuel Tolkien,\" \"John\" is the given name.\n2. **Middle Name** - In many cultures, people also receive one or more \"middle names.\" These names are typically either just a second given name, a woman's [maiden name](https://en.wikipedia.org/wiki/Maiden_and_married_names), a name of family significance (e.g., the mother's maiden name), or a [patronymic](https://en.wikipedia.org/wiki/Patronymic)/[matronymic](https://en.wikipedia.org/wiki/Matronymic) name. In \"John Ronald Reuel Tolkien,\" \"Ronald\" is the middle name.\n3. **Second Middle Name** - In some cultures, children are given two middle names, either at birth or at a young age, as in Catholic confirmation (e.g., [George R. R. Martin](https://en.wikipedia.org/wiki/George_R._R._Martin#Early_life)). In \"John Ronald Reuel Tolkien,\" \"Reuel\" is the second middle name.\n4. **Nickname** - It's not uncommon for people to accumulate various and sundry sobriquets throughout their lives, or simply to prefer to go by a name different from their given name. In \"Pete 'Maverick' Mitchell,\" \"Maverick\" is the nickname.\n5. **Family Name** - In most cultures, a person's family name is inherited from one or both of their parents. Family names are also called last names and surnames. In \"John Ronald Reuel Tolkien,\" \"Tolkien\" is the family name.\n6. **Second Family Name** - In some cultures (particularly [hispanic](https://en.wikipedia.org/wiki/Spanish_naming_customs) cultures), children receive two surnames at birth. In \"José Fernández Martínez,\" \"Fernández\" is the family name, and \"Martínez\" is the second family name.\n\nMore components may be added to the name model over time, e.g., titles.\n\nNote that while individual parts of a name held separately are not PII (e.g., \"John\" and \"Tolkien,\" separately), a full name (e.g., \"John Ronald Reuel Tolkien\") is PII.\n\nCost: 1 credit, whether the parse is successful or not.\n",
        "operationId": "parseHumanName",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HumanNameParseRequest"
              }
            }
          },
          "description": "A request to the `parseHumanName` endpoint.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanNameParseResponse"
                }
              }
            },
            "description": "200 response",
            "headers": {
              "X-API-Credits": {
                "$ref": "#/components/headers/X-API-Credits"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest400"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized401"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden403"
          },
          "413": {
            "$ref": "#/components/responses/ContentTooLarge413"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType415"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity422"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests429"
          }
        },
        "summary": "Parse a human name (1 credit)",
        "tags": [
          "Humans",
          "Names"
        ]
      }
    },
    "/v1/humans/names/parse/bulk": {
      "post": {
        "description": "Parse a list of up to 10 human names in one operation.\n\nBulk operations are intended to increase throughput, not reduce cost.\n\nCost: 1 credit per name, whether each parse is successful or not.\n",
        "operationId": "parseHumanNameBulk",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HumanNameParseBulkRequest"
              }
            }
          },
          "description": "A request to the `parseHumanNameBulk` endpoint.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanNameParseBulkResponse"
                }
              }
            },
            "description": "200 response",
            "headers": {
              "X-API-Credits": {
                "$ref": "#/components/headers/X-API-Credits"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest400"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized401"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden403"
          },
          "413": {
            "$ref": "#/components/responses/ContentTooLarge413"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType415"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity422"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests429"
          }
        },
        "summary": "Parse human names, in bulk (1-10 credits)",
        "tags": [
          "Humans",
          "Names"
        ]
      }
    },
    "/v1/locations/names/analyze": {
      "post": {
        "description": "Analyze a location name provided in parts, i.e., country, state, and city.\n\nCost: 1 credit, regardless of whether or not the match succeeds.\n",
        "operationId": "analyzeLocationName",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationNameAnalyzeRequest"
              }
            }
          },
          "description": "The location name to analyze",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationNameAnalyzeResponse"
                }
              }
            },
            "description": "The resolve procedure completed successfully. It still may not contain a match.",
            "headers": {
              "X-API-Credits": {
                "$ref": "#/components/headers/X-API-Credits"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest400"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized401"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden403"
          },
          "413": {
            "$ref": "#/components/responses/ContentTooLarge413"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType415"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity422"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests429"
          }
        },
        "summary": "Analyze a location name from parts (1 credit)",
        "tags": [
          "Locations"
        ]
      }
    },
    "/v1/locations/names/analyze/bulk": {
      "post": {
        "description": "Analyze a list of up to 10 location names in one operation.\n\nBulk operations are intended to increase throughput, not reduce cost.\n\nCost: 1 credit per name, whether each match is successful or not.\n",
        "operationId": "analyzeLocationNameBulk",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationNameAnalyzeBulkRequest"
              }
            }
          },
          "description": "The list of location names to analyze",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationNameAnalyzeBulkResponse"
                }
              }
            },
            "description": "The resolve procedure completed successfully. It still may not contain a match.",
            "headers": {
              "X-API-Credits": {
                "$ref": "#/components/headers/X-API-Credits"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest400"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized401"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden403"
          },
          "413": {
            "$ref": "#/components/responses/ContentTooLarge413"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType415"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity422"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests429"
          }
        },
        "summary": "Analyze location names, in bulk (1-10 credits)",
        "tags": [
          "Locations"
        ]
      }
    },
    "/v1/locations/names/resolve": {
      "post": {
        "description": "Resolve a location name string (e.g., \"Alexandria, VA\") into its most likely real-world location (e.g., Alexandria, US-VA, US). A location has at most three components:\n\n1. **City** - The lowest-level administrative entity that either is or contains the location and has an [ISO 3166-1 code](https://en.wikipedia.org/wiki/ISO_3166-1), e.g., [US](https://en.wikipedia.org/wiki/United_States), [FR](https://en.wikipedia.org/wiki/France), etc.\n2. **State** - The highest-level administrative entity that either is or contains the location and has an [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) code, e.g., [US-VA](https://en.wikipedia.org/wiki/Virginia), [FR-OCC](https://en.wikipedia.org/wiki/Occitania_%28administrative_region%29), etc.\n3. **City** - A human settlement that has no ISO 3166-1 or 3166-2 codes, e.g., [Alexandria, VA](https://en.wikipedia.org/wiki/Alexandria,_Virginia), [Tolouse, FR](https://en.wikipedia.org/wiki/Toulouse).\n\nAll location matches have a country. In general, if a location match has a city, then it also has a state, although some exceptions exist.\n\nNote that a resolved location is very different from a geocoded address. In particular, locations are not considered PII, whereas addresses are.\n\n Cost: 1 credit, whether the match is successful or not.",
        "operationId": "resolveLocationName",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationNameResolveRequest"
              }
            }
          },
          "description": "A request to the `resolveLocationName` endpoint.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationNameResolveResponse"
                }
              }
            },
            "description": "200 response",
            "headers": {
              "X-API-Credits": {
                "$ref": "#/components/headers/X-API-Credits"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest400"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized401"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden403"
          },
          "413": {
            "$ref": "#/components/responses/ContentTooLarge413"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType415"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity422"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests429"
          }
        },
        "summary": "Resolve a location name (1 credit)",
        "tags": [
          "Locations"
        ]
      }
    },
    "/v1/locations/names/resolve/bulk": {
      "post": {
        "description": "Resolve a list of up to 10 location names in one operation.\n\nBulk operations are intended to increase throughput, not reduce cost.\n\nCost: 1 credit per location name, whether each match is successful or not.",
        "operationId": "resolveLocationNameBulk",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationNameResolveBulkRequest"
              }
            }
          },
          "description": "A request to the `resolveLocationNameBulk` endpoint.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationNameResolveBulkResponse"
                }
              }
            },
            "description": "200 response",
            "headers": {
              "X-API-Credits": {
                "$ref": "#/components/headers/X-API-Credits"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest400"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized401"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden403"
          },
          "413": {
            "$ref": "#/components/responses/ContentTooLarge413"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType415"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity422"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests429"
          }
        },
        "summary": "Resolve location names, in bulk (1-10 credits)",
        "tags": [
          "Locations"
        ]
      }
    },
    "/v1/ping": {
      "get": {
        "operationId": "ping",
        "responses": {
          "204": {
            "content": {},
            "description": "204 response",
            "headers": {
              "X-API-Credits": {
                "$ref": "#/components/headers/X-API-Credits"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest400"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized401"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden403"
          },
          "413": {
            "$ref": "#/components/responses/ContentTooLarge413"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType415"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity422"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests429"
          }
        },
        "tags": [
          "Utility"
        ]
      }
    },
    "/v1/social/profiles/instagram/analyze": {
      "post": {
        "description": "Analyze an [Instagram](https://www.instagram.com/) social media profile, as identified by its ID or handle. If both the ID and the handle are given, then the ID is used. Analyses of the name and picture fields are combined to produce a single estimate of the profile owner's age, gender, race, and country.\n\nCost: The sum of the below for inputs included.\n\n* Base cost: 5 credits\n* Name: 1 credit\n* Face: 3 credits\n\nUsers are only billed for those fields which are populated in the profile. So, a call for a profile with the name populated but the default profile picture would cost 5+1 = 6 credits.",
        "operationId": "analyzeInstagramSocialMediaProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalyzeInstagramSocialProfileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyzeSocialProfileResponse"
                }
              }
            },
            "description": "200 response",
            "headers": {
              "X-API-Credits": {
                "$ref": "#/components/headers/X-API-Credits"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest400"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized401"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden403"
          },
          "413": {
            "$ref": "#/components/responses/ContentTooLarge413"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType415"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity422"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests429"
          }
        },
        "summary": "Analyze an Instagram social media profile (5-9 credits)",
        "tags": [
          "Social Profiles",
          "Beta"
        ]
      }
    },
    "/v1/social/profiles/threads/analyze": {
      "post": {
        "description": "Analyze a [Threads](https://www.threads.net/) social media profile, as identified by its ID or handle. If both the ID and the handle are given, then the ID is used. Analyses of the name and picture fields are combined to produce a single estimate of the profile owner's age, gender, race, and country.\n\nCost: The sum of the below for inputs included.\n\n* Base cost: 5 credits\n* Name: 1 credit\n* Face: 3 credits\n\nUsers are only billed for those fields which are populated in the profile. So, a call for a profile with the name populated but the default profile picture would cost 5+1 = 6 credits.",
        "operationId": "analyzeThreadsSocialMediaProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalyzeThreadsSocialProfileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyzeSocialProfileResponse"
                }
              }
            },
            "description": "200 response",
            "headers": {
              "X-API-Credits": {
                "$ref": "#/components/headers/X-API-Credits"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest400"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized401"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden403"
          },
          "413": {
            "$ref": "#/components/responses/ContentTooLarge413"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType415"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity422"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests429"
          }
        },
        "summary": "Analyze a Threads social media profile (5-9 credits)",
        "tags": [
          "Social Profiles",
          "Beta"
        ]
      }
    },
    "/v1/social/profiles/tiktok/analyze": {
      "post": {
        "description": "Analyze a TikTok social media profile, as identified by its handle. Analyses of the name and picture fields are combined to produce a single estimate of the profile owner's age, gender, race, and country.\n\nCost: The sum of the below for inputs included.\n\n* Base cost: 5 credits\n* Name: 1 credit\n* Face: 3 credits\n\nUsers are only billed for those fields which are populated in the profile. So, a call for a profile with the name populated but the location and profile pictures blank would cost 5+1 = 6 credits.",
        "operationId": "analyzeTikTokSocialMediaProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalyzeTikTokSocialProfileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyzeSocialProfileResponse"
                }
              }
            },
            "description": "200 response",
            "headers": {
              "X-API-Credits": {
                "$ref": "#/components/headers/X-API-Credits"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest400"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized401"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden403"
          },
          "413": {
            "$ref": "#/components/responses/ContentTooLarge413"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType415"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity422"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests429"
          }
        },
        "summary": "Analyze a TikTok social media profile (5-9 credits)",
        "tags": [
          "Social Profiles",
          "Beta"
        ]
      }
    },
    "/v1/social/profiles/twitter/analyze": {
      "post": {
        "description": "Analyze a [Twitter](https://www.x.com/) (now \"X\") social media profile, as identified by its ID or handle. If both the ID and the handle are given, then the ID is used. Analyses of the name, location, and picture fields are combined to produce a single estimate of the profile owner's age, gender, race, and country.\n\nCost: The sum of the below for inputs included.\n\n* Base cost: 5 credits\n* Name: 1 credit\n* Location: 1 credit\n* Face: 3 credits\n\nUsers are only billed for those fields which are populated in the profile. So, a call for a profile with the name populated but the default profile picture and no location would cost 5+1 = 6 credits.",
        "operationId": "analyzeTwitterSocialMediaProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalyzeTwitterSocialProfileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyzeSocialProfileResponse"
                }
              }
            },
            "description": "200 response",
            "headers": {
              "X-API-Credits": {
                "$ref": "#/components/headers/X-API-Credits"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest400"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized401"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden403"
          },
          "413": {
            "$ref": "#/components/responses/ContentTooLarge413"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType415"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity422"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests429"
          }
        },
        "summary": "Analyze a Twitter social media profile (5-10 credits)",
        "tags": [
          "Social Profiles",
          "Beta"
        ]
      }
    }
  },
  "security": [
    {
      "bearer": []
    }
  ],
  "servers": [
    {
      "url": "https://api.humangraphics.io"
    }
  ],
  "tags": [
    {
      "description": "Process human name, face, and demographic data",
      "name": "Humans"
    },
    {
      "description": "Process human names",
      "name": "Names"
    },
    {
      "description": "Process human faces",
      "name": "Faces"
    },
    {
      "description": "Process location data",
      "name": "Locations"
    },
    {
      "description": "Process social media profiles",
      "name": "Social Profiles"
    },
    {
      "description": "Perform basic utility functions",
      "name": "Utility"
    },
    {
      "description": "These endpoints are in a \"beta\" testing period. They may experience unexpected outages, and their features, functionality, and performance may change in non-backwards compatible ways without notice.",
      "name": "Beta"
    }
  ]
}
